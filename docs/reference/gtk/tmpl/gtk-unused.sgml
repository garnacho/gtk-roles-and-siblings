<!-- ##### SECTION ./tmpl/gtkdebug.sgml:Title ##### -->
Debugging


<!-- ##### SIGNAL GtkEditable::cut-clipboard ##### -->
<para>
An action signal. Causes the characters in the current
selection to be copied to the clipboard and then deleted from
the widget.
</para>

@editable: the object which received the signal.

<!-- ##### SECTION ./tmpl/gtkdebug.sgml:Short_Description ##### -->



<!-- ##### MACRO gtk_marshal_NONE__BOXED ##### -->
<para>

</para>


<!-- ##### SECTION ./tmpl/gtkmarshal.sgml:Long_Description ##### -->
<refsect2>
<title>What are Signal Marshallers?</title>
<para>
Marshals are functions which all have the same prototype:
they take a #GtkObject, a #GtkSignalFunc, a #gpointer,
and an array of argument values.
The functions are names gtk_marshall_RETURNTYPE__PARAMTYPE1_PARAMTYPE2....
</para>
<para>
They then call a native function:  the GtkObject is the first
parameter passed in.  The arguments are passed in the native
calling convention:  chars, shorts, ints, longs may be packed
on the stack, or tucked in registers:  it doesn't matter
because the same calling convention will be generated
inside the gtkmarshal code as is expected where you define
your handlers.
</para>
<para>
So the function named:
<programlisting>
gtk_marshal_BOOL__POINTER_INT_INT_UINT(GtkObject*, GtkSignalFunc, gpointer, GtkArg*);
</programlisting>
will call the #GtkSignalFunc assuming it was a function with signature:
<programlisting>
gboolean sigfunc(gpointer,gint,gint,guint);
</programlisting>
</para>
</refsect2>
<refsect2>
<title>Writing Custom Marshals</title>
<para>
Marshals are primarily used as arguments to gtk_signal_new().
Sometimes, you may find that a marshaller you need isn't available
in the standard list.  Then you have to write your own.
</para>
<para>
If you wish to define a signal with a new type of argument list.
Suppose you want 2 pointers and 2 integers.
You would write:
<programlisting>
typedef int (*GtkSignal_INT__POINTER_POINTER_INT_INT)(
			gpointer, gpointer, gint, gint
);

void marshal_INT__POINTER_POINTER_INT_INT(GtkObject*    object,
					   GtkSignalFunc func,
					   gpointer      func_data,
                                           GtkArg*       args)
{
	GtkSignal_NONE__POINTER_POINTER_INT_INT rfunc;
	gint* return_val;
	return_val = GTK_RETLOC_INT(args[4]);
	rfunc = (GtkSignal_INT__POINTER_POINTER_INT_INT)func;
	*return_val = (*rfunc)(object,
                               GTK_VALUE_POINTER(args[0]),
                               GTK_VALUE_POINTER(args[1]),
                               GTK_VALUE_INT(args[2]),
                               GTK_VALUE_INT(args[3]),
                               func_data);
}
</programlisting>
</para>
</refsect2>


<!-- ##### SECTION ./tmpl/gtkmenufactory.sgml:Short_Description ##### -->



<!-- ##### MACRO gtk_marshal_NONE__UINT_STRING ##### -->
<para>

</para>


<!-- ##### MACRO GTK_PRIVATE_UNSET_FLAG ##### -->
<para>

</para>

@wid: 
@flag: 

<!-- ##### MACRO GTK_WIDGET_REDRAW_PENDING ##### -->
<para>

</para>

@obj: 

<!-- ##### FUNCTION gtk_icon_factory_get_type ##### -->
<para>

</para>

@Returns: 

<!-- ##### FUNCTION gtk_theme_engine_create_rc_style ##### -->
<para>

</para>

@engine: 
@Returns: 

<!-- ##### MACRO gtk_marshal_NONE__ENUM_FLOAT ##### -->
<para>

</para>


<!-- ##### FUNCTION gtk_tree_store_new_with_values ##### -->
<para>

</para>

@n_columns: 
@Varargs: 
@Returns: 

<!-- ##### SIGNAL GtkTextView::insert ##### -->
<para>

</para>

@textview: the object which received the signal.
@arg1: 

<!-- ##### MACRO gtk_widget_set_default_visual ##### -->
<para>

</para>

@v: 
@visual: 

<!-- ##### FUNCTION gtk_window_set_focus ##### -->
<para>

</para>

@window: 
@focus: 

<!-- ##### SECTION ./tmpl/gtkprivate.sgml:See_Also ##### -->
<para>

</para>


<!-- ##### MACRO gtk_marshal_NONE__POINTER_UINT_ENUM ##### -->
<para>

</para>


<!-- ##### ARG GtkEditable:editable ##### -->
<para>
A boolean indicating whether the widget is editable by
the user.
</para>


<!-- ##### SECTION ./tmpl/gtkmenufactory.sgml:See_Also ##### -->
<para>

</para>


<!-- ##### FUNCTION gtk_font_selection_set_filter ##### -->
<para>
Sets one of the two font filters, to limit the fonts shown.
</para>

@fontsel: a #GtkFontSelection.
@filter_type: which of the two font filters to set, either
#GTK_FONT_FILTER_BASE or #GTK_FONT_FILTER_USER. The user filter
can be changed by the user, but the base filter is permanent.
@font_type: the types of font to be shown. This is a bitwise combination of
#GTK_FONT_BITMAP, #GTK_FONT_SCALABLE and #GTK_FONT_SCALABLE_BITMAP,
or #GTK_FONT_ALL to show all three font types.
@foundries: a NULL-terminated array of strings containing foundry names which
will be shown, or NULL to show all foundries.
@weights: a NULL-terminated array of strings containing weight names which
will be shown, or NULL to show all weights.
@slants: a NULL-terminated array of strings containing slant names which
will be shown, or NULL to show all slants.
@setwidths: a NULL-terminated array of strings containing setwidth names which
will be shown, or NULL to show all setwidths.
@spacings: a NULL-terminated array of strings containing spacings which
will be shown, or NULL to show all spacings.
@charsets: a NULL-terminated array of strings containing charset names which
will be shown, or NULL to show all charsets.

<!-- ##### FUNCTION gtk_container_unregister_toplevel ##### -->
<para>

</para>

@container: 

<!-- ##### SECTION ./tmpl/gtkmarshal.sgml:Title ##### -->
Signal Marshallers


<!-- ##### SECTION ./tmpl/gtkenums.sgml.sgml:Long_Description ##### -->
<para>

</para>


<!-- ##### STRUCT GtkTypeQuery ##### -->
<para>
A structure used to return values from @gtk_type_query.
</para>

@type: 
@type_name: 
@object_size: 
@class_size: 

<!-- ##### FUNCTION gtk_text_buffer_get_clipboard_contents ##### -->
<para>

</para>

@buffer: 
@Returns: 

<!-- ##### MACRO gtk_widget_pop_visual ##### -->
<para>

</para>

@v: 

<!-- ##### FUNCTION gtk_marshal_NONE__C_CALLBACK ##### -->
<para>

</para>

@object: 
@func: 
@func_data: 
@args: 

<!-- ##### USER_FUNCTION GtkSignalMarshal ##### -->
<para>
This is currently a hack left in for a scheme wrapper library.
It may be removed.
</para>
<para>
Don't use it.
</para>

@object: The object which emits the signal.
@data: The user data associated with the hook.
@nparams: The number of parameters to the function.
@args: The actual values of the arguments.
@arg_types: The types of the arguments.
@return_type: The type of the return value from the function
or #GTK_TYPE_NONE for no return value.

<!-- ##### FUNCTION gtk_signal_add_emission_hook_full ##### -->
<para>
Add an emission hook for a type of signal, for any object.
(with control of what happens when the hook is
destroyed).
</para>

@signal_id: the type of signal add the hook for.
@hook_func: the function to invoke to handle the hook.
@data: the user data passed in to hook_func.
@destroy: a function to invoke when the hook is destroyed,
to clean up any allocation done just for this
signal handler.
@Returns: the id (that you may pass as a parameter
to gtk_signal_remove_emission_hook()).

<!-- ##### FUNCTION gtk_text_buffer_paste_primary_selection ##### -->
<para>

</para>

@buffer: 
@override_location: 
@time: 
@interactive: 
@default_editable: 

<!-- ##### FUNCTION gtk_marshal_BOOL__POINTER_INT_INT ##### -->
<para>

</para>

@object: 
@func: 
@func_data: 
@args: 

<!-- ##### SIGNAL GtkTextView::copy-text ##### -->
<para>

</para>

@textview: the object which received the signal.

<!-- ##### FUNCTION gtk_text_view_get_iter_at_pixel ##### -->
<para>

</para>

@text_view: 
@iter: 
@x: 
@y: 

<!-- ##### STRUCT GtkThemeEngine ##### -->
<para>

</para>


<!-- ##### FUNCTION gtk_text_buffer_get_tags ##### -->
<para>

</para>

@buffer: 
@iter: 
@Returns: 

<!-- ##### SECTION ./tmpl/gtkenums.sgml.sgml:Short_Description ##### -->



<!-- ##### FUNCTION gtk_identifier_get_type ##### -->
<para>
Get the type of GtkIdentifier.
</para>

@Returns: GtkType -- the enumerated type of something.

<!-- ##### FUNCTION gtk_theme_engine_get ##### -->
<para>

</para>

@name: 
@Returns: 

<!-- ##### MACRO gtk_marshal_BOOL__POINTER_INT_INT_UINT ##### -->
<para>

</para>


<!-- ##### FUNCTION gtk_marshal_NONE__POINTER_POINTER ##### -->
<para>

</para>

@object: 
@func: 
@func_data: 
@args: 

<!-- ##### FUNCTION gtk_theme_engine_ref ##### -->
<para>

</para>

@engine: 

<!-- ##### FUNCTION gtk_marshal_NONE__INT_INT ##### -->
<para>

</para>

@object: 
@func: 
@func_data: 
@args: 

<!-- ##### FUNCTION gtk_marshal_NONE__NONE ##### -->
<para>

</para>

@object: 
@func: 
@func_data: 
@args: 

<!-- ##### FUNCTION gtk_text_mark_deleted ##### -->
<para>

</para>

@mark: 
@Returns: 

<!-- ##### MACRO gtk_marshal_BOOL__POINTER_STRING_STRING_POINTER ##### -->
<para>

</para>


<!-- ##### SIGNAL GtkEditable::set-editable ##### -->
<para>
Determines if the user can edit the text in the editable
widget or not. This is meant to be overriden by 
child classes and should not generally useful to
applications.
</para>

@editable: the object which received the signal.
@is_editable: %TRUE if the user is allowed to edit the text
  in the widget.

<!-- ##### SIGNAL GtkEditable::delete-text ##### -->
<para>
This signal is emitted when text is deleted from
the widget by the user. The default handler for
this signal will normally be responsible for inserting
the text, so by connecting to this signal and then
stopping the signal with gtk_signal_emit_stop(), it
is possible to modify the inserted text, or prevent
it from being inserted entirely. The @start_pos
and @end_pos parameters are interpreted as for
gtk_editable_delete_text()
</para>

@editable: the object which received the signal.
@start_pos: the starting position.
@end_pos: the end position.

<!-- ##### FUNCTION gtk_ruler_draw_ticks ##### -->
<para>

</para>

@ruler: the gtkruler

<!-- ##### SIGNAL GtkEditable::kill-line ##### -->
<para>
An action signal. Delete a single line.
</para>

@editable: the object which received the signal.
@direction: the direction in which to delete. Positive
   indicates forward deletion, negative, backwards deletion.

<!-- ##### FUNCTION gtk_themes_init ##### -->
<para>

</para>

@argc: 
@argv: 

<!-- ##### FUNCTION gtk_type_register_enum ##### -->
<para>
Register a new set of enum @values and give them the name in
@type_name.
</para>

@type_name: must not be null.
@values: GtkEnumValue*
@Returns: 

<!-- ##### SECTION ./tmpl/gtkmenufactory.sgml:Title ##### -->
Menu Factory


<!-- ##### VARIABLE gtk_debug_flags ##### -->
<para>

</para>


<!-- ##### MACRO gtk_widget_set_visual ##### -->
<para>

</para>

@w: 
@v: 
@widget: 
@visual: 

<!-- ##### MACRO gtk_marshal_NONE__UINT_POINTER_UINT_ENUM_ENUM_POINTER ##### -->
<para>

</para>


<!-- ##### MACRO GTK_TYPE_SEQNO ##### -->
<para>
Convert a gtk type into its sequence number
</para>

@type: 

<!-- ##### SECTION ./tmpl/gtkimcontextsimple.sgml:See_Also ##### -->
<para>

</para>


<!-- ##### ENUM GtkMenuFactoryType ##### -->
<para>

</para>

@GTK_MENU_FACTORY_MENU: 
@GTK_MENU_FACTORY_MENU_BAR: 
@GTK_MENU_FACTORY_OPTION_MENU: 

<!-- ##### MACRO gtk_marshal_NONE__STRING ##### -->
<para>

</para>


<!-- ##### MACRO gtk_marshal_NONE__POINTER_POINTER_UINT_UINT ##### -->
<para>

</para>


<!-- ##### MACRO GTK_WIDGET_IS_OFFSCREEN ##### -->
<para>

</para>

@obj: 

<!-- ##### MACRO GTK_MAX_COMPOSE_LEN ##### -->
<para>

</para>


<!-- ##### SECTION ./tmpl/gtkprivate.sgml:Short_Description ##### -->



<!-- ##### SIGNAL GtkTextView::cut-text ##### -->
<para>

</para>

@textview: the object which received the signal.

<!-- ##### FUNCTION gtk_theme_engine_unref ##### -->
<para>

</para>

@engine: 

<!-- ##### STRUCT GtkDialogButton ##### -->
<para>
Deprecated.
</para>


<!-- ##### FUNCTION gtk_marshal_BOOL__POINTER ##### -->
<para>

</para>

@object: 
@func: 
@func_data: 
@args: 

<!-- ##### ARG GtkTextTag:overstrike_set ##### -->
<para>

</para>


<!-- ##### FUNCTION gtk_text_buffer_cut ##### -->
<para>

</para>

@buffer: 
@time: 
@interactive: 
@default_editable: 

<!-- ##### SIGNAL GtkEditable::activate ##### -->
<para>
Indicates that the user has activated the widget
in some fashion. Generally, this will be done
with a keystroke. (The default binding for this
action is Return for #GtkEntry and
Control-Return for #GtkText.)
</para>

@editable: the object which received the signal.

<!-- ##### ENUM GtkTextViewMovementStep ##### -->
<para>

</para>

@GTK_TEXT_MOVEMENT_CHAR: 
@GTK_TEXT_MOVEMENT_POSITIONS: 
@GTK_TEXT_MOVEMENT_WORD: 
@GTK_TEXT_MOVEMENT_WRAPPED_LINE: 
@GTK_TEXT_MOVEMENT_LINE: 
@GTK_TEXT_MOVEMENT_LINE_ENDS: 
@GTK_TEXT_MOVEMENT_BUFFER_ENDS: 

<!-- ##### FUNCTION gtk_marshal_NONE__POINTER_POINTER_INT_INT ##### -->
<para>

</para>

@object: 
@func: 
@func_data: 
@args: 

<!-- ##### SECTION ./tmpl/gtkdebug.sgml:See_Also ##### -->
<para>

</para>


<!-- ##### MACRO GTK_CONTAINER_RESIZE_PENDING ##### -->
<para>

</para>

@obj: 

<!-- ##### SIGNAL GtkEditable::copy-clipboard ##### -->
<para>
An action signal. Causes the characters in the current selection to
be copied to the clipboard.
</para>

@editable: the object which received the signal.

<!-- ##### FUNCTION gtk_menu_factory_remove_entries ##### -->
<para>

</para>

@factory: 
@entries: 
@nentries: 

<!-- ##### FUNCTION gtk_text_buffer_find_string ##### -->
<para>

</para>

@buffer: 
@iter: 
@str: 
@start: 
@end: 
@Returns: 

<!-- ##### FUNCTION gtk_marshal_NONE__INT_POINTER_INT_INT_INT_POINTER ##### -->
<para>

</para>

@object: 
@func: 
@func_data: 
@args: 

<!-- ##### FUNCTION gtk_marshal_INT__INT ##### -->
<para>

</para>

@object: 
@func: 
@func_data: 
@args: 

<!-- ##### FUNCTION gtk_marshal_NONE__INT_FLOAT_BOOL ##### -->
<para>

</para>

@object: 
@func: 
@func_data: 
@args: 

<!-- ##### FUNCTION gtk_paned_compute_position ##### -->
<para>
Internal function used by #GtkHPaned and #GtkVPaned
</para>

@paned: 
@allocation: 
@child1_req: 
@child2_req: 

<!-- ##### MACRO gtk_marshal_NONE__POINTER_STRING_STRING ##### -->
<para>

</para>


<!-- ##### FUNCTION gtk_trace_referencing ##### -->
<para>
Private: print debugging information while doing a gtk_object_ref() or 
a gtk_object_unref().
</para>

@object: object to reference or unreference.
@func: name of caller's function to print (used within macros).
@dummy: unused.
@line: line number (used within macros).
@do_ref: whether to reference or unreference.

<!-- ##### MACRO GTK_VALUE_CALLBACK ##### -->
<para>
Use to get the value of a GtkArg whose GtkType is GTK_TYPE_CALLBACK
</para>

@a: 

<!-- ##### MACRO gtk_marshal_NONE__ENUM_FLOAT_BOOL ##### -->
<para>

</para>


<!-- ##### ENUM GtkFontType ##### -->
<para>
A set of bit flags used to specify the type of fonts shown
when calling gtk_font_selection_dialog_set_filter() or
gtk_font_selection_set_filter().
</para>

@GTK_FONT_BITMAP: bitmap fonts.
@GTK_FONT_SCALABLE: scalable fonts.
@GTK_FONT_SCALABLE_BITMAP: scaled bitmap fonts.
@GTK_FONT_ALL: a bitwise combination of all of the above.

<!-- ##### MACRO GTK_TYPE_STRUCTURED_LAST ##### -->
<para>
The last structured enumerated type value.
</para>


<!-- ##### MACRO GTK_OBJECT_NSIGNALS ##### -->
<para>
Get the number of signals defined by this object.
</para>

@obj: the object to query.

<!-- ##### FUNCTION gtk_menu_factory_remove_subfactory ##### -->
<para>

</para>

@factory: 
@subfactory: 
@path: 

<!-- ##### FUNCTION gtk_type_children_types ##### -->
<para>
Return the pointer to the type's children's types.
</para>

@type: GtkType
@Returns: pointer to a GList

<!-- ##### SIGNAL GtkEditable::move-page ##### -->
<para>
An action signal. Move the cursor by pages.
</para>

@editable: the object which received the signal.
@x: Number of pages to move the cursor horizontally.
@y: Number of pages to move the cursor vertically.

<!-- ##### FUNCTION gtk_type_register_flags ##### -->
<para>
Register a new set of flags @values and give them the name in
@type_name.
</para>

@type_name: must not be null.
@values: GtkFlagValue*
@Returns: 

<!-- ##### SIGNAL GtkTextView::scroll-text ##### -->
<para>

</para>

@textview: the object which received the signal.
@arg1: 

<!-- ##### ENUM GtkPrivateFlags ##### -->
<para>

</para>

@PRIVATE_GTK_USER_STYLE: 
@PRIVATE_GTK_RESIZE_PENDING: 
@PRIVATE_GTK_RESIZE_NEEDED: 
@PRIVATE_GTK_LEAVE_PENDING: 
@PRIVATE_GTK_HAS_SHAPE_MASK: 
@PRIVATE_GTK_IN_REPARENT: 
@PRIVATE_GTK_DIRECTION_SET: 
@PRIVATE_GTK_DIRECTION_LTR: 

<!-- ##### FUNCTION gtk_type_set_chunk_alloc ##### -->
<para>
Set the mem_chunk size so it will hold @n_chunks of the objects of that @type.
</para>

@type: There must be an unlocked TypeNode associated with this type otherwise nothing happens.
@n_chunks: 

<!-- ##### MACRO GTK_TYPE_STRUCTURED_FIRST ##### -->
<para>
The first structured enumerated type value.
</para>


<!-- ##### STRUCT GtkSignalQuery ##### -->
<para>
This structure contains all the information about a particular
signal:  its name, the type it affects, the signature of the handlers,
and its unique identifying integer.
</para>

@object_type: 
@signal_id: 
@signal_name: 
@is_user_signal: 
@signal_flags: 
@return_val: 
@nparams: 
@params: 

<!-- ##### FUNCTION gtk_type_describe_tree ##### -->
<para>
Given a @type, describe all of its children, and their children.  Only
show the size if @show_size is true.
</para>

@type: GtkType
@show_size: gboolean

<!-- ##### FUNCTION gtk_text_mark_is_visible ##### -->
<para>

</para>

@mark: 
@Returns: 

<!-- ##### FUNCTION gtk_marshal_BOOL__POINTER_INT_INT_INT ##### -->
<para>

</para>

@object: 
@func: 
@func_data: 
@args: 

<!-- ##### SIGNAL GtkEditable::kill-char ##### -->
<para>
An action signal. Delete a single character.
</para>

@editable: the object which received the signal.
@direction: the direction in which to delete. Positive
   indicates forward deletion, negative, backwards deletion.

<!-- ##### SECTION ./tmpl/gtkdebug.sgml:Long_Description ##### -->
<para>

</para>


<!-- ##### FUNCTION gtk_window_remove_embedded_xid ##### -->
<para>

</para>

@window: 
@xid: 

<!-- ##### FUNCTION gtk_marshal_NONE__INT_FLOAT ##### -->
<para>

</para>

@object: 
@func: 
@func_data: 
@args: 

<!-- ##### FUNCTION gtk_text_iter_get_pixmap ##### -->
<para>

</para>

@iter: 
@pixmap: 
@mask: 
@Returns: 

<!-- ##### SIGNAL GtkEditable::kill-word ##### -->
<para>
An action signal. Delete a single word.
</para>

@editable: the object which received the signal.
@direction: the direction in which to delete. Positive
   indicates forward deletion, negative, backwards deletion.

<!-- ##### FUNCTION gtk_im_context_simple_add_table ##### -->
<para>

</para>

@context_simple: 
@data: 
@max_seq_len: 
@n_seqs: 

<!-- ##### MACRO gtk_marshal_NONE__POINTER_UINT_UINT ##### -->
<para>

</para>


<!-- ##### FUNCTION gtk_font_selection_dialog_set_filter ##### -->
<para>
Sets one of the two font filters, to limit the fonts shown.
</para>

@fsd: a #GtkFontSelectionDialog.
@filter_type: which of the two font filters to set, either
#GTK_FONT_FILTER_BASE or #GTK_FONT_FILTER_USER. The user filter
can be changed by the user, but the base filter is permanent.
@font_type: the types of font to be shown. This is a bitwise combination of
#GTK_FONT_BITMAP, #GTK_FONT_SCALABLE and #GTK_FONT_SCALABLE_BITMAP,
or #GTK_FONT_ALL to show all three font types.
@foundries: a NULL-terminated array of strings containing foundry names which
will be shown, or NULL to show all foundries.
@weights: a NULL-terminated array of strings containing weight names which
will be shown, or NULL to show all weights.
@slants: a NULL-terminated array of strings containing slant names which
will be shown, or NULL to show all slants.
@setwidths: a NULL-terminated array of strings containing setwidth names which
will be shown, or NULL to show all setwidths.
@spacings: a NULL-terminated array of strings containing spacings which
will be shown, or NULL to show all spacings.
@charsets: a NULL-terminated array of strings containing charset names which
will be shown, or NULL to show all charsets.

<!-- ##### SIGNAL GtkTextView::delete-text ##### -->
<para>

</para>

@textview: the object which received the signal.
@arg1: 
@arg2: 

<!-- ##### FUNCTION gtk_container_get_toplevels ##### -->
<para>

</para>

@Returns: 

<!-- ##### MACRO GTK_TYPE_NUM_BUILTINS ##### -->
<para>
No idea.
</para>


<!-- ##### MACRO GTK_TYPE_MAKE ##### -->
<para>
Combine a fundemantal type and a sequence number to create a gtk type.
</para>

@parent_t: 
@seqno: 

<!-- ##### SECTION ./tmpl/gtkmarshal.sgml:Short_Description ##### -->
Functions to adapt C structures to native calling convention.


<!-- ##### MACRO GTK_TYPE_FLAT_LAST ##### -->
<para>
The last "flat" (no struct) enumerated type value.
</para>


<!-- ##### FUNCTION gtk_text_mark_unref ##### -->
<para>

</para>

@mark: 

<!-- ##### FUNCTION gtk_marshal_NONE__POINTER ##### -->
<para>

</para>

@object: 
@func: 
@func_data: 
@args: 

<!-- ##### FUNCTION gtk_marshal_NONE__POINTER_INT_POINTER ##### -->
<para>

</para>

@object: 
@func: 
@func_data: 
@args: 

<!-- ##### FUNCTION gtk_signal_handlers_destroy ##### -->
<para>
Destroy all the signal handlers connected to an object.
This is done automatically when the object is destroyed.
</para>
<para>
This function is labeled private.
</para>

@object: the object whose signal handlers should be destroyed.

<!-- ##### FUNCTION gtk_text_iter_in_region ##### -->
<para>

</para>

@iter: 
@start: 
@end: 
@Returns: 

<!-- ##### FUNCTION gtk_type_get_varargs_type ##### -->
<para>
Get the varargs type associated with @foreign_type
</para>

@foreign_type: GtkType
@Returns: GtkType

<!-- ##### SIGNAL GtkEditable::changed ##### -->
<para>
Indicates that the user has changed the contents
of the widget.
</para>

@editable: the object which received the signal.

<!-- ##### STRUCT GtkMenuFactory ##### -->
<para>

</para>

@path: 
@type: 
@accel_group: 
@widget: 
@subfactories: 

<!-- ##### SIGNAL GtkTextView::delete-at-cursor ##### -->
<para>

</para>

@textview: the object which received the signal.
@arg1: 
@arg2: 

<!-- ##### MACRO GTK_VALUE_FOREIGN ##### -->
<para>
Use to get the value of a GtkArg whose GtkType is GTK_TYPE_C_FOREIGN
</para>

@a: 

<!-- ##### SIGNAL GtkTextView::paste-text ##### -->
<para>

</para>

@textview: the object which received the signal.

<!-- ##### MACRO GTK_PRIVATE_SET_FLAG ##### -->
<para>

</para>

@wid: 
@flag: 

<!-- ##### FUNCTION gtk_ruler_draw_pos ##### -->
<para>

</para>

@ruler: the gtkruler

<!-- ##### MACRO GTK_WIDGET_USER_STYLE ##### -->
<para>

</para>

@obj: 

<!-- ##### ENUM GtkDebugFlag ##### -->
<para>

</para>

@GTK_DEBUG_OBJECTS: 
@GTK_DEBUG_MISC: 
@GTK_DEBUG_SIGNALS: 
@GTK_DEBUG_DND: 
@GTK_DEBUG_PLUGSOCKET: 

<!-- ##### FUNCTION gtk_menu_factory_remove_paths ##### -->
<para>

</para>

@factory: 
@paths: 
@npaths: 

<!-- ##### FUNCTION gtk_type_query ##### -->
<para>
Given a type, return various interesting parameters of the type.
</para>

@type: GtkType
@Returns: GtkTypeQuery*

<!-- ##### SECTION ./tmpl/gtkprivate.sgml:Long_Description ##### -->
<para>

</para>


<!-- ##### MACRO GTK_TYPE_IDENTIFIER ##### -->
<para>
Hide the name of gtk_identifier_get_type
</para>


<!-- ##### FUNCTION gtk_marshal_NONE__INT_POINTER_INT_INT_INT ##### -->
<para>

</para>

@object: 
@func: 
@func_data: 
@args: 

<!-- ##### MACRO gtk_marshal_NONE__ENUM ##### -->
<para>

</para>


<!-- ##### FUNCTION gtk_signal_handler_pending_by_id ##### -->
<para>
Returns whether a connection id is valid (and optionally not blocked).
</para>

@object: the object to search for the desired handler.
@handler_id: the connection id.
@may_be_blocked: whether it is acceptable to return a blocked
handler.
@Returns: TRUE if the signal exists and wasn't blocked,
unless #may_be_blocked was specified.  FALSE otherwise.

<!-- ##### MACRO GTK_PRIVATE_FLAGS ##### -->
<para>

</para>

@wid: 

<!-- ##### FUNCTION gtk_marshal_BOOL__NONE ##### -->
<para>

</para>

@object: 
@func: 
@func_data: 
@args: 

<!-- ##### FUNCTION gtk_type_free ##### -->
<para>
Given the type of an object and a pointer to it, the object is freed.
</para>

@type: GtkType
@mem: gpointer to the object

<!-- ##### SECTION ./tmpl/gtkimcontextsimple.sgml:Short_Description ##### -->



<!-- ##### FUNCTION gtk_marshal_NONE__POINTER_POINTER_POINTER ##### -->
<para>

</para>

@object: 
@func: 
@func_data: 
@args: 

<!-- ##### STRUCT GtkMenuPath ##### -->
<para>

</para>

@path: 
@widget: 

<!-- ##### MACRO gtk_marshal_NONE__POINTER_UINT ##### -->
<para>

</para>


<!-- ##### SECTION ./tmpl/gtkprivate.sgml:Title ##### -->
Private Information


<!-- ##### FUNCTION gtk_theme_engine_register_type ##### -->
<para>

</para>

@engine: 
@parent_type: 
@type_name: 
@type_info: 
@Returns: 

<!-- ##### FUNCTION gtk_menu_factory_find ##### -->
<para>

</para>

@factory: 
@path: 
@Returns: 

<!-- ##### STRUCT GtkMenuEntry ##### -->
<para>

</para>

@path: 
@accelerator: 
@callback: 
@callback_data: 
@widget: 

<!-- ##### SIGNAL GtkEditable::paste-clipboard ##### -->
<para>
An action signal. Causes the contents of the clipboard to
be pasted into the editable widget at the current cursor
position.
</para>

@editable: the object which received the signal.

<!-- ##### FUNCTION gtk_window_add_embedded_xid ##### -->
<para>

</para>

@window: 
@xid: 

<!-- ##### FUNCTION gtk_marshal_NONE__BOOL ##### -->
<para>

</para>

@object: 
@func: 
@func_data: 
@args: 

<!-- ##### FUNCTION gtk_color_selection_set_opacity ##### -->
<para>
Controls whether opacity can be set with the #GtkColorSelection.
If this functionality is enabled, the necessary additional widgets
are added to the #GtkColorSelection and the opacity value can be
retrieved via the fourth value in the color array returned by
the gtk_color_selection_get_color() function.
</para>

@colorsel: a #GtkColorSelection.
@use_opacity: a boolean indicating whether the opacity selection
is enabled.

<!-- ##### FUNCTION gtk_marshal_INT__POINTER ##### -->
<para>

</para>

@object: 
@func: 
@func_data: 
@args: 

<!-- ##### SECTION ./tmpl/gtkmarshal.sgml:See_Also ##### -->
<para>
<variablelist>

<varlistentry>
<term>#GtkSignal</term>
<listitem><para>The signal handling functions (of which marshallers are 
really an implementation detail).</para></listitem>
</varlistentry>

</variablelist>
</para>


<!-- ##### SIGNAL GtkEditable::move-word ##### -->
<para>
An action signal. Move the cursor by words.
</para>

@editable: the object which received the signal.
@num_words: The number of words to move the
cursor. (Can be negative).

<!-- ##### STRUCT GtkTreeViewPrivate ##### -->
<para>

</para>

@model: 
@flags: 
@tree: 
@tab_offset: 
@button_pressed_node: 
@button_pressed_tree: 
@children: 
@width: 
@height: 
@hadjustment: 
@vadjustment: 
@bin_window: 
@header_window: 
@anchor: 
@cursor: 
@cursor_drag: 
@xor_gc: 
@drag_pos: 
@x_drag: 
@prelight_node: 
@prelight_tree: 
@prelight_offset: 
@selection: 
@columns: 
@column: 
@header_height: 

<!-- ##### MACRO GTK_WIDGET_RESIZE_NEEDED ##### -->
<para>

</para>

@obj: 

<!-- ##### MACRO GTK_NOTE ##### -->
<para>

</para>

@type: 
@action: 

<!-- ##### ENUM GtkTextViewDeleteType ##### -->
<para>

</para>

@GTK_TEXT_DELETE_CHAR: 
@GTK_TEXT_DELETE_HALF_WORD: 
@GTK_TEXT_DELETE_WHOLE_WORD: 
@GTK_TEXT_DELETE_HALF_WRAPPED_LINE: 
@GTK_TEXT_DELETE_WHOLE_WRAPPED_LINE: 
@GTK_TEXT_DELETE_HALF_LINE: 
@GTK_TEXT_DELETE_WHOLE_LINE: 
@GTK_TEXT_DELETE_WHITESPACE: 
@GTK_TEXT_DELETE_WHITESPACE_LEAVE_ONE: 

<!-- ##### STRUCT GtkIMContextSimple ##### -->
<para>

</para>

@object: 
@tables: 
@compose_buffer: 
@tentative_match: 
@tentative_match_len: 

<!-- ##### MACRO GTK_TYPE_FLAT_FIRST ##### -->
<para>
The first "flat" (no struct) enumerated type value.
</para>


<!-- ##### FUNCTION gtk_menu_factory_new ##### -->
<para>

</para>

@type: 
@Returns: 

<!-- ##### MACRO gtk_marshal_NONE__UINT_POINTER_UINT_UINT_ENUM ##### -->
<para>

</para>


<!-- ##### FUNCTION gtk_text_buffer_spew ##### -->
<para>

</para>

@buffer: 

<!-- ##### STRUCT GtkTextTabArray ##### -->
<para>

</para>


<!-- ##### ARG GtkTextTag:overstrike ##### -->
<para>

</para>


<!-- ##### MACRO GTK_TREE_SELECTION ##### -->
<para>
A macro that returns a GList that contains the selection of the root tree of @obj.
</para>

@obj: A pointer to the #GtkTree. @obj will accept any pointer, but it the pointer does not point to a #GtkTree, the results are undefined.

<!-- ##### FUNCTION gtk_editable_changed ##### -->
<para>
Causes the "changed" signal to be emitted.
</para>

@editable: a #GtkEditable widget.

<!-- ##### SIGNAL GtkTextView::move ##### -->
<para>

</para>

@textview: the object which received the signal.
@arg1: 
@arg2: 
@arg3: 

<!-- ##### MACRO GTK_WIDGET_HAS_SHAPE_MASK ##### -->
<para>

</para>

@obj: 

<!-- ##### FUNCTION gtk_text_buffer_copy ##### -->
<para>

</para>

@buffer: 
@time: 

<!-- ##### FUNCTION gtk_text_mark_ref ##### -->
<para>

</para>

@mark: 
@Returns: 

<!-- ##### SIGNAL GtkEditable::insert-text ##### -->
<para>
This signal is emitted when text is inserted into
the widget by the user. The default handler for
this signal will normally be responsible for inserting
the text, so by connecting to this signal and then
stopping the signal with gtk_signal_emit_stop(), it
is possible to modify the inserted text, or prevent
it from being inserted entirely.
</para>

@editable: the object which received the signal.
@new_text: the new text to insert.
@new_text_length: the length of the new text.
@position: the position at which to insert the new text.
           this is an in-out paramter. After the signal
           emission is finished, it should point after   
           the newly inserted text.

<!-- ##### FUNCTION gtk_editable_claim_selection ##### -->
<para>
Claim or disclaim ownership of the PRIMARY X selection.
</para>

@editable: a #GtkEditable widget.
@claim: if %TRUE, claim the selection, otherwise, disclaim it.
@time: the timestamp for claiming the selection.

<!-- ##### FUNCTION gtk_marshal_NONE__POINTER_INT ##### -->
<para>

</para>

@object: 
@func: 
@func_data: 
@args: 

<!-- ##### MACRO GTK_OBJECT_SIGNALS ##### -->
<para>
Get the array of signals defined for this object.
</para>

@obj: the object to fetch the signals from.

<!-- ##### SIGNAL GtkEditable::move-to-column ##### -->
<para>
An action signal. Move the cursor to the given column.
</para>

@editable: the object which received the signal.
@column: the column to move to. (A negative value indicates
         the last column)

<!-- ##### SECTION ./tmpl/gtkenums.sgml.sgml:Title ##### -->
gtkenums.sgml


<!-- ##### FUNCTION gtk_marshal_NONE__INT_INT_POINTER ##### -->
<para>

</para>

@object: 
@func: 
@func_data: 
@args: 

<!-- ##### USER_FUNCTION GtkMenuCallback ##### -->
<para>

</para>

@widget: 
@user_data: 

<!-- ##### FUNCTION gtk_type_check_object_cast ##### -->
<para>
Given a pointer to a GtkTypeObject @type_object, and a GtkType @cast_type,
make sure that it's okay to cast @type_object into a @cast_type.
</para>

@type_object: GtkTypeObject*
@cast_type: GtkType
@Returns: the same GtkTypeObject* as @type_object

<!-- ##### FUNCTION gtk_themes_exit ##### -->
<para>

</para>

@error_code: 

<!-- ##### FUNCTION gtk_marshal_BOOL__POINTER_POINTER_POINTER_POINTER ##### -->
<para>

</para>

@object: 
@func: 
@func_data: 
@args: 

<!-- ##### ARG GtkEditable:text_position ##### -->
<para>
The position of the cursor.
</para>


<!-- ##### MACRO gtk_marshal_NONE__OBJECT ##### -->
<para>

</para>


<!-- ##### SECTION ./tmpl/gtkmenufactory.sgml:Long_Description ##### -->
<para>

</para>


<!-- ##### FUNCTION gtk_type_set_varargs_type ##### -->
<para>
Set the varargs type for a fundamental type @foreign_type.
</para>

@foreign_type: Must be a GtkType with a sequence number of zero.  Must not be a
fundamental type.
@varargs_type: Must be a GtkType which is either structured or flag, or NONE.

<!-- ##### FUNCTION gtk_type_check_class_cast ##### -->
<para>
Given a GtkTypeClass pointer @klass, and a GtkType @cast_type, make
sure that it's okay to cast something of that @klass into a @cast_type.
</para>

@klass: GtkTypeClass*
@cast_type: GtkType
@Returns: Always return @klass.

<!-- ##### FUNCTION gtk_menu_factory_destroy ##### -->
<para>

</para>

@factory: 

<!-- ##### FUNCTION gtk_signal_n_emissions ##### -->
<para>
Find out the recursion depth of emissions for a particular type
of signal and object.  (So it will
always return 0 or 1 if #GTK_RUN_NO_RECURSE is specified)
This is a way to avoid recursion:  you can see if
you are currently running in that signal handler and emit it only
if you are.
</para>
<para>Another way to look at it is that this number increases
by one when #gtk_signal_emit(), et al, are called,
and decreases by one when #gtk_signal_emit() returns.
</para>

@object: the object with the signal handler.
@signal_id: the signal id.
@Returns: the recursion depth of emissions of this signal for this
object.

<!-- ##### FUNCTION gtk_text_buffer_insert_pixmap ##### -->
<para>

</para>

@buffer: 
@iter: 
@pixmap: 
@mask: 

<!-- ##### FUNCTION gtk_marshal_NONE__C_CALLBACK_C_CALLBACK ##### -->
<para>

</para>

@object: 
@func: 
@func_data: 
@args: 

<!-- ##### FUNCTION gtk_marshal_NONE__POINTER_INT_INT_POINTER_INT_INT ##### -->
<para>

</para>

@object: 
@func: 
@func_data: 
@args: 

<!-- ##### MACRO GTK_VALUE_ARGS ##### -->
<para>
Use to get the value of a GtkArg whose GtkType is GTK_TYPE_ARGS
</para>

@a: 

<!-- ##### FUNCTION gtk_menu_factory_add_entries ##### -->
<para>

</para>

@factory: 
@entries: 
@nentries: 

<!-- ##### SIGNAL GtkEditable::move-to-row ##### -->
<para>
An action signal. Move the cursor to the given row.
</para>

@editable: the object which received the signal.
@row: the row to move to. (A negative value indicates 
      the last row)

<!-- ##### FUNCTION gtk_signal_set_funcs ##### -->
<para>
These set default functions to call when the user didn't
supply a function when connecting.  (These are rarely
used, and probably only for language bindings)
</para>
<para>
By default, there are no such functions.
</para>

@marshal_func: the function to invoke on every handlers for which there
isn't a function pointer.  May be NULL.
@destroy_func: the function to invoke when each hook is destroyed.
May be NULL.

<!-- ##### FUNCTION gtk_im_context_simple_new ##### -->
<para>

</para>

@Returns: 

<!-- ##### FUNCTION gtk_type_describe_heritage ##### -->
<para>
Print the types @type inherits from.
</para>

@type: GtkType

<!-- ##### FUNCTION gtk_text_buffer_set_clipboard_contents ##### -->
<para>

</para>

@buffer: 
@text: 

<!-- ##### ENUM GtkFontFilterType ##### -->
<para>
A set of bit flags used to specify the filter being set
when calling gtk_font_selection_dialog_set_filter() or
gtk_font_selection_set_filter().
</para>

@GTK_FONT_FILTER_BASE: the base filter, which can't be changed by the user.
@GTK_FONT_FILTER_USER: the user filter, which can be changed from within the
'Filter' page of the #GtkFontSelection widget.

<!-- ##### SIGNAL GtkEditable::move-cursor ##### -->
<para>
An action signal. Move the cursor position.
</para>

@editable: the object which received the signal.
@x: horizontal distance to move the cursor.
@y: vertical distance to move the cursor.

<!-- ##### FUNCTION gtk_type_parent_class ##### -->
<para>
Return the class of the parent.  Initialize the class if necessary.
Return NULL if anything goes wrong.
</para>

@type: GtkType
@Returns: gpointer to the klass.

<!-- ##### USER_FUNCTION GtkSignalDestroy ##### -->
<para>
A function which you can use to clean up when the
signal handler is destroyed.
</para>
<para>
For example, if your handler requires a few variables
that you made into a struct and allocated (using g_new()
or something), then you will probably want to free
it as soon as the hook is destroyed.  This will
allow you to do that. (For this in particular
it is convenient to pass g_free() as a #GtkSignalDestroy
function).
</para>

@data: The user data associated with the hook that is being
destroyed.

<!-- ##### FUNCTION gtk_window_set_default ##### -->
<para>

</para>

@window: 
@defaultw: 

<!-- ##### FUNCTION gtk_marshal_NONE__INT ##### -->
<para>

</para>

@object: 
@func: 
@func_data: 
@args: 

<!-- ##### MACRO GTK_WIDGET_LEAVE_PENDING ##### -->
<para>

</para>

@obj: 

<!-- ##### MACRO gtk_marshal_NONE__UINT ##### -->
<para>

</para>


<!-- ##### MACRO GTK_WIDGET_IN_REPARENT ##### -->
<para>

</para>

@obj: 

<!-- ##### FUNCTION gtk_accel_group_marshal_add ##### -->
<para>

</para>

@object: 
@func: 
@func_data: 
@args: 

<!-- ##### FUNCTION gtk_marshal_INT__POINTER_CHAR_CHAR ##### -->
<para>

</para>

@object: 
@func: 
@func_data: 
@args: 

<!-- ##### FUNCTION gtk_marshal_NONE__POINTER_INT_INT ##### -->
<para>

</para>

@object: 
@func: 
@func_data: 
@args: 

<!-- ##### FUNCTION gtk_accel_group_marshal_remove ##### -->
<para>

</para>

@object: 
@func: 
@func_data: 
@args: 

<!-- ##### MACRO gtk_marshal_NONE__STRING_INT_POINTER ##### -->
<para>

</para>


<!-- ##### FUNCTION gtk_marshal_NONE__INT_POINTER ##### -->
<para>

</para>

@object: 
@func: 
@func_data: 
@args: 

<!-- ##### FUNCTION gtk_rc_init ##### -->
<para>
Internal function.
</para>


<!-- ##### FUNCTION gtk_signal_query ##### -->
<para>
Obtain information about a signal.
</para>

@signal_id: the signal type identifier.
@Returns: a pointer to a GtkSignalQuery structure
which contains all the information, or NULL.
The pointer is allocated just for you:  you must g_free() it.

<!-- ##### FUNCTION gtk_signal_n_emissions_by_name ##### -->
<para>
Find out the recursion depth of emissions for a particular type
of signal and object.  Just like gtk_signal_n_emissions()
except it will lookup the signal id for you.
</para>

@object: the object with the signal handler.
@name: the signal name.
@Returns: the recursion depth of emissions of this signal for this
object.

<!-- ##### SECTION ./tmpl/gtkenums.sgml.sgml:See_Also ##### -->
<para>

</para>


<!-- ##### SIGNAL GtkTextView::delete ##### -->
<para>

</para>

@textview: the object which received the signal.
@arg1: 
@arg2: 

<!-- ##### FUNCTION gtk_container_register_toplevel ##### -->
<para>

</para>

@container: 

<!-- ##### MACRO gtk_widget_push_visual ##### -->
<para>

</para>

@v: 
@visual: 

<!-- ##### MACRO gtk_marshal_ENUM__ENUM ##### -->
<para>

</para>


<!-- ##### SECTION ./tmpl/gtkimcontextsimple.sgml:Title ##### -->
GtkIMContextSimple


<!-- ##### MACRO gtk_marshal_NONE__POINTER_INT_INT_POINTER_UINT_UINT ##### -->
<para>

</para>


<!-- ##### MACRO GTK_VALUE_C_CALLBACK ##### -->
<para>
Use to get the value of a GtkArg whose GtkType is GTK_TYPE_C_CALLBACK
</para>

@a: 

<!-- ##### FUNCTION gtk_marshal_BOOL__POINTER_POINTER_INT_INT ##### -->
<para>

</para>

@object: 
@func: 
@func_data: 
@args: 

<!-- ##### SIGNAL GtkTextView::move-insert ##### -->
<para>

</para>

@textview: the object which received the signal.
@arg1: 
@arg2: 
@arg3: 

<!-- ##### SECTION ./tmpl/gtkimcontextsimple.sgml:Long_Description ##### -->
<para>

</para>


<!-- ##### FUNCTION gtk_text_buffer_find_regexp ##### -->
<para>

</para>

@buffer: 
@regexp: 
@start: 
@end: 
@Returns: 

<!-- ##### FUNCTION gtk_menu_factory_add_subfactory ##### -->
<para>

</para>

@factory: 
@subfactory: 
@path: 

<!-- ##### ENUM GtkTextViewScrollType ##### -->
<para>

</para>

@GTK_TEXT_SCROLL_TO_TOP: 
@GTK_TEXT_SCROLL_TO_BOTTOM: 
@GTK_TEXT_SCROLL_PAGE_DOWN: 
@GTK_TEXT_SCROLL_PAGE_UP: 

<!-- ##### STRUCT GtkTextBTree ##### -->
<para>

</para>


