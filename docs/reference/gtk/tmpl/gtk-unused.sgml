<!-- ##### SECTION ./tmpl/gtkdata.sgml:Long_Description ##### -->
<para>
The #GtkData object is a very simple object intended to be used as a base
class for objects which contain data (i.e. the 'Model' in the object-oriented
Model/View/Controller framework).
</para>
<para>
Currently it is not very useful since all it provides is a "disconnect" signal.
This signal could be emitted by a #GtkData subclass to notify any 'Views'
that they should disconnect from the #GtkData (the 'Model'), possibly just
before the #GtkData is destroyed.
</para>


<!-- ##### SECTION ./tmpl/gtkdata.sgml:See_Also ##### -->
<para>

</para>


<!-- ##### SECTION ./tmpl/gtkdata.sgml:Short_Description ##### -->
abstract base class for objects containing data.


<!-- ##### SECTION ./tmpl/gtkdata.sgml:Title ##### -->
GtkData


<!-- ##### SECTION ./tmpl/gtkdebug.sgml:Title ##### -->
Debugging


<!-- ##### SECTION ./tmpl/gtkenums.sgml.sgml:Title ##### -->
gtkenums.sgml


<!-- ##### SECTION ./tmpl/gtkimcontextsimple.sgml:Title ##### -->
GtkIMContextSimple


<!-- ##### SECTION ./tmpl/gtkmarshal.sgml:Long_Description ##### -->
<refsect2>
<title>What are Signal Marshallers?</title>
<para>
Marshals are functions which all have the same prototype:
they take a #GtkObject, a #GtkSignalFunc, a #gpointer,
and an array of argument values.
The functions are names gtk_marshall_RETURNTYPE__PARAMTYPE1_PARAMTYPE2....
</para>
<para>
They then call a native function:  the GtkObject is the first
parameter passed in.  The arguments are passed in the native
calling convention:  chars, shorts, ints, longs may be packed
on the stack, or tucked in registers:  it doesn't matter
because the same calling convention will be generated
inside the gtkmarshal code as is expected where you define
your handlers.
</para>
<para>
So the function named:
<programlisting>
gtk_marshal_BOOL__POINTER_INT_INT_UINT(GtkObject*, GtkSignalFunc, gpointer, GtkArg*);
</programlisting>
will call the #GtkSignalFunc assuming it was a function with signature:
<programlisting>
gboolean sigfunc(gpointer,gint,gint,guint);
</programlisting>
</para>
</refsect2>
<refsect2>
<title>Writing Custom Marshals</title>
<para>
Marshals are primarily used as arguments to gtk_signal_new().
Sometimes, you may find that a marshaller you need isn't available
in the standard list.  Then you have to write your own.
</para>
<para>
If you wish to define a signal with a new type of argument list.
Suppose you want 2 pointers and 2 integers.
You would write:
<programlisting>
typedef int (*GtkSignal_INT__POINTER_POINTER_INT_INT)(
			gpointer, gpointer, gint, gint
);

void marshal_INT__POINTER_POINTER_INT_INT(GtkObject*    object,
					   GtkSignalFunc func,
					   gpointer      func_data,
                                           GtkArg*       args)
{
	GtkSignal_NONE__POINTER_POINTER_INT_INT rfunc;
	gint* return_val;
	return_val = GTK_RETLOC_INT(args[4]);
	rfunc = (GtkSignal_INT__POINTER_POINTER_INT_INT)func;
	*return_val = (*rfunc)(object,
                               GTK_VALUE_POINTER(args[0]),
                               GTK_VALUE_POINTER(args[1]),
                               GTK_VALUE_INT(args[2]),
                               GTK_VALUE_INT(args[3]),
                               func_data);
}
</programlisting>
</para>
</refsect2>


<!-- ##### SECTION ./tmpl/gtkmarshal.sgml:See_Also ##### -->
<para>
<variablelist>

<varlistentry>
<term>#GtkSignal</term>
<listitem><para>The signal handling functions (of which marshallers are 
really an implementation detail).</para></listitem>
</varlistentry>

</variablelist>
</para>


<!-- ##### SECTION ./tmpl/gtkmarshal.sgml:Short_Description ##### -->
Functions to adapt C structures to native calling convention.


<!-- ##### SECTION ./tmpl/gtkmarshal.sgml:Title ##### -->
Signal Marshallers


<!-- ##### SECTION ./tmpl/gtkprivate.sgml:Title ##### -->
Private Information


<!-- ##### SECTION ./tmpl/gtktreemodelsimple.sgml:Long_Description ##### -->
<para>

</para>


<!-- ##### SECTION ./tmpl/gtktreemodelsimple.sgml:See_Also ##### -->
<para>

</para>


<!-- ##### SECTION ./tmpl/gtktreemodelsimple.sgml:Short_Description ##### -->



<!-- ##### SECTION ./tmpl/gtktreemodelsimple.sgml:Title ##### -->
GtkModelSimple


<!-- ##### MACRO GTK_CLIST_CHILD_HAS_FOCUS ##### -->
<para>
A macro to check whether a child widget of the CList
has the focus.
</para>

@clist: The #GtkCList widget to check.

<!-- ##### MACRO GTK_ICON_SIZE_BUTTON ##### -->
<para>

</para>


<!-- ##### MACRO GTK_ICON_SIZE_DIALOG ##### -->
<para>

</para>


<!-- ##### MACRO GTK_ICON_SIZE_LARGE_TOOLBAR ##### -->
<para>

</para>


<!-- ##### MACRO GTK_ICON_SIZE_MENU ##### -->
<para>

</para>


<!-- ##### MACRO GTK_ICON_SIZE_SMALL_TOOLBAR ##### -->
<para>

</para>


<!-- ##### MACRO GTK_OBJECT_CONSTRUCTED ##### -->
<para>
Test whether a GtkObject's arguments have been prepared.
</para>

@obj: the object to examine.

<!-- ##### MACRO GTK_OBJECT_NSIGNALS ##### -->
<para>
Get the number of signals defined by this object.
</para>

@obj: the object to query.

<!-- ##### MACRO GTK_OBJECT_SIGNALS ##### -->
<para>
Get the array of signals defined for this object.
</para>

@obj: the object to fetch the signals from.

<!-- ##### MACRO GTK_STOCK_BUTTON_APPLY ##### -->
<para>

</para>


<!-- ##### MACRO GTK_STOCK_BUTTON_CANCEL ##### -->
<para>

</para>


<!-- ##### MACRO GTK_STOCK_BUTTON_CLOSE ##### -->
<para>

</para>


<!-- ##### MACRO GTK_STOCK_BUTTON_NO ##### -->
<para>

</para>


<!-- ##### MACRO GTK_STOCK_BUTTON_OK ##### -->
<para>

</para>


<!-- ##### MACRO GTK_STOCK_BUTTON_YES ##### -->
<para>

</para>


<!-- ##### MACRO GTK_TREE_SELECTION ##### -->
<para>
A macro that returns a GList that contains the selection of the root tree of @obj.
</para>

@obj: A pointer to the #GtkTree. @obj will accept any pointer, but it the pointer does not point to a #GtkTree, the results are undefined.

<!-- ##### MACRO GTK_TYPE_FLAT_FIRST ##### -->
<para>
The first "flat" (no struct) enumerated type value.
</para>


<!-- ##### MACRO GTK_TYPE_FLAT_LAST ##### -->
<para>
The last "flat" (no struct) enumerated type value.
</para>


<!-- ##### MACRO GTK_TYPE_IDENTIFIER ##### -->
<para>
Hide the name of gtk_identifier_get_type
</para>


<!-- ##### MACRO GTK_TYPE_MAKE ##### -->
<para>
Combine a fundemantal type and a sequence number to create a gtk type.
</para>

@parent_t: 
@seqno: 

<!-- ##### MACRO GTK_TYPE_NUM_BUILTINS ##### -->
<para>
No idea.
</para>


<!-- ##### MACRO GTK_TYPE_SEQNO ##### -->
<para>
Convert a gtk type into its sequence number
</para>

@type: 

<!-- ##### MACRO GTK_TYPE_STRUCTURED_FIRST ##### -->
<para>
The first structured enumerated type value.
</para>


<!-- ##### MACRO GTK_TYPE_STRUCTURED_LAST ##### -->
<para>
The last structured enumerated type value.
</para>


<!-- ##### MACRO GTK_TYPE_TREE_COLUMN ##### -->
<para>

</para>


<!-- ##### MACRO GTK_VALUE_ARGS ##### -->
<para>
Use to get the value of a GtkArg whose GtkType is GTK_TYPE_ARGS
</para>

@a: 

<!-- ##### MACRO GTK_VALUE_CALLBACK ##### -->
<para>
Use to get the value of a GtkArg whose GtkType is GTK_TYPE_CALLBACK
</para>

@a: 

<!-- ##### MACRO GTK_VALUE_C_CALLBACK ##### -->
<para>
Use to get the value of a GtkArg whose GtkType is GTK_TYPE_C_CALLBACK
</para>

@a: 

<!-- ##### MACRO GTK_VALUE_FOREIGN ##### -->
<para>
Use to get the value of a GtkArg whose GtkType is GTK_TYPE_C_FOREIGN
</para>

@a: 

<!-- ##### ARG GtkAccelLabel:accel-width ##### -->
<para>

</para>


<!-- ##### USER_FUNCTION GtkArgGetFunc ##### -->
<para>
Define a function pointer.  Deprecated.
</para>

@object: 
@arg: 
@arg_id: 

<!-- ##### USER_FUNCTION GtkArgSetFunc ##### -->
<para>
Define a function pointer.  Deprecated.
</para>

@object: 
@arg: 
@arg_id: 

<!-- ##### SIGNAL GtkContainer::focus ##### -->
<para>

</para>

@container: the object which received the signal.
@direction: 
@Returns: 

<!-- ##### ARG GtkContainer:reallocate-redraws ##### -->
<para>

</para>


<!-- ##### STRUCT GtkData ##### -->
<para>
The #GtkData-struct struct contains no public fields.
</para>


<!-- ##### SIGNAL GtkData::disconnect ##### -->
<para>
Emitted to notify any views on the #GtkData object to disconnect from it,
possibly because the #GtkData object is about to be destroyed.
</para>

@data: the object which received the signal.

<!-- ##### SIGNAL GtkEditable::activate ##### -->
<para>
Indicates that the user has activated the widget
in some fashion. Generally, this will be done
with a keystroke. (The default binding for this
action is Return for #GtkEntry and
Control-Return for #GtkText.)
</para>

@editable: the object which received the signal.

<!-- ##### SIGNAL GtkEditable::changed ##### -->
<para>
Indicates that the user has changed the contents
of the widget.
</para>

@editable: the object which received the signal.

<!-- ##### SIGNAL GtkEditable::copy-clipboard ##### -->
<para>
An action signal. Causes the characters in the current selection to
be copied to the clipboard.
</para>

@editable: the object which received the signal.

<!-- ##### SIGNAL GtkEditable::cut-clipboard ##### -->
<para>
An action signal. Causes the characters in the current
selection to be copied to the clipboard and then deleted from
the widget.
</para>

@editable: the object which received the signal.

<!-- ##### SIGNAL GtkEditable::delete-text ##### -->
<para>
This signal is emitted when text is deleted from
the widget by the user. The default handler for
this signal will normally be responsible for inserting
the text, so by connecting to this signal and then
stopping the signal with gtk_signal_emit_stop(), it
is possible to modify the inserted text, or prevent
it from being inserted entirely. The @start_pos
and @end_pos parameters are interpreted as for
gtk_editable_delete_text()
</para>

@editable: the object which received the signal.
@start_pos: the starting position.
@end_pos: the end position.

<!-- ##### SIGNAL GtkEditable::insert-text ##### -->
<para>
This signal is emitted when text is inserted into
the widget by the user. The default handler for
this signal will normally be responsible for inserting
the text, so by connecting to this signal and then
stopping the signal with gtk_signal_emit_stop(), it
is possible to modify the inserted text, or prevent
it from being inserted entirely.
</para>

@editable: the object which received the signal.
@new_text: the new text to insert.
@new_text_length: the length of the new text.
@position: the position at which to insert the new text.
           this is an in-out paramter. After the signal
           emission is finished, it should point after   
           the newly inserted text.

<!-- ##### SIGNAL GtkEditable::kill-char ##### -->
<para>
An action signal. Delete a single character.
</para>

@editable: the object which received the signal.
@direction: the direction in which to delete. Positive
   indicates forward deletion, negative, backwards deletion.

<!-- ##### SIGNAL GtkEditable::kill-line ##### -->
<para>
An action signal. Delete a single line.
</para>

@editable: the object which received the signal.
@direction: the direction in which to delete. Positive
   indicates forward deletion, negative, backwards deletion.

<!-- ##### SIGNAL GtkEditable::kill-word ##### -->
<para>
An action signal. Delete a single word.
</para>

@editable: the object which received the signal.
@direction: the direction in which to delete. Positive
   indicates forward deletion, negative, backwards deletion.

<!-- ##### SIGNAL GtkEditable::move-cursor ##### -->
<para>
An action signal. Move the cursor position.
</para>

@editable: the object which received the signal.
@x: horizontal distance to move the cursor.
@y: vertical distance to move the cursor.

<!-- ##### SIGNAL GtkEditable::move-page ##### -->
<para>
An action signal. Move the cursor by pages.
</para>

@editable: the object which received the signal.
@x: Number of pages to move the cursor horizontally.
@y: Number of pages to move the cursor vertically.

<!-- ##### SIGNAL GtkEditable::move-to-column ##### -->
<para>
An action signal. Move the cursor to the given column.
</para>

@editable: the object which received the signal.
@column: the column to move to. (A negative value indicates
         the last column)

<!-- ##### SIGNAL GtkEditable::move-to-row ##### -->
<para>
An action signal. Move the cursor to the given row.
</para>

@editable: the object which received the signal.
@row: the row to move to. (A negative value indicates 
      the last row)

<!-- ##### SIGNAL GtkEditable::move-word ##### -->
<para>
An action signal. Move the cursor by words.
</para>

@editable: the object which received the signal.
@num_words: The number of words to move the
cursor. (Can be negative).

<!-- ##### SIGNAL GtkEditable::paste-clipboard ##### -->
<para>
An action signal. Causes the contents of the clipboard to
be pasted into the editable widget at the current cursor
position.
</para>

@editable: the object which received the signal.

<!-- ##### SIGNAL GtkEditable::set-editable ##### -->
<para>
Determines if the user can edit the text in the editable
widget or not. This is meant to be overriden by 
child classes and should not generally useful to
applications.
</para>

@editable: the object which received the signal.
@is_editable: %TRUE if the user is allowed to edit the text
  in the widget.

<!-- ##### ARG GtkEditable:editable ##### -->
<para>
A boolean indicating whether the widget is editable by
the user.
</para>


<!-- ##### ARG GtkEditable:text-position ##### -->
<para>
The position of the cursor.
</para>


<!-- ##### USER_FUNCTION GtkEmissionHook ##### -->
<para>
A simple function pointer to get invoked when the
signal is emitted.  This allows you tie a hook to the signal type,
so that it will trap all emissions of that signal, from any object.
</para>
<para>
You may not attach these to signals created with the
#GTK_RUN_NO_HOOKS flag.
</para>

@object: 
@signal_id: 
@n_params: 
@params: 
@data: 
@Returns: 

<!-- ##### ENUM GtkFontFilterType ##### -->
<para>
A set of bit flags used to specify the filter being set
when calling gtk_font_selection_dialog_set_filter() or
gtk_font_selection_set_filter().
</para>

@GTK_FONT_FILTER_BASE: the base filter, which can't be changed by the user.
@GTK_FONT_FILTER_USER: the user filter, which can be changed from within the
'Filter' page of the #GtkFontSelection widget.

<!-- ##### ENUM GtkFontType ##### -->
<para>
A set of bit flags used to specify the type of fonts shown
when calling gtk_font_selection_dialog_set_filter() or
gtk_font_selection_set_filter().
</para>

@GTK_FONT_BITMAP: bitmap fonts.
@GTK_FONT_SCALABLE: scalable fonts.
@GTK_FONT_SCALABLE_BITMAP: scaled bitmap fonts.
@GTK_FONT_ALL: a bitwise combination of all of the above.

<!-- ##### ARG GtkFrame:shadow-type ##### -->
<para>

</para>


<!-- ##### ARG GtkHScale:adjustment ##### -->
<para>
the #GtkAdjustment which sets the range of the scale.
</para>


<!-- ##### ARG GtkHScrollbar:adjustment ##### -->
<para>

</para>


<!-- ##### STRUCT GtkIMContextSimple ##### -->
<para>

</para>

@object: 
@tables: 
@compose_buffer: 
@tentative_match: 
@tentative_match_len: 

<!-- ##### ARG GtkLabel:accel-keyval ##### -->
<para>

</para>


<!-- ##### ARG GtkObject:object-signal ##### -->
<para>
Setting this with a GtkType of GTK_TYPE_SIGNAL connects
the signal to the object, so that the user data and objects
and swapped when the signal handler is invoked.
</para>
<para>
This is useful for handlers that are primarily notifying
other objects and could just invoke an already existing function
if the parameters were swapped.
See gtk_signal_connect_object() for more details.
</para>


<!-- ##### ARG GtkObject:object-signal-after ##### -->
<para>
Setting this with a GtkType of GTK_TYPE_SIGNAL connects
the signal to the object, so that the user data and objects
and swapped when the signal handler is invoked,
and so that the handler is invoked after all others.
</para>
<para>
See gtk_signal_connect_object_after() for more details.
</para>


<!-- ##### ARG GtkObject:signal ##### -->
<para>
Setting this with a GtkType of GTK_TYPE_SIGNAL connects
the signal to the object.
</para>


<!-- ##### ARG GtkObject:signal-after ##### -->
<para>
Setting this with a GtkType of GTK_TYPE_SIGNAL connects
the signal to the object, so that the signal is always run
after other user handlers and the default handler.
</para>


<!-- ##### ARG GtkPaned:handle-size ##### -->
<para>

</para>


<!-- ##### STRUCT GtkPatternSpec ##### -->
<para>

</para>

@match_type: 
@pattern_length: 
@pattern: 
@pattern_reversed: 
@user_data: 
@seq_id: 

<!-- ##### ENUM GtkPrivateFlags ##### -->
<para>

</para>

@PRIVATE_GTK_USER_STYLE: 
@PRIVATE_GTK_RESIZE_PENDING: 
@PRIVATE_GTK_RESIZE_NEEDED: 
@PRIVATE_GTK_LEAVE_PENDING: 
@PRIVATE_GTK_HAS_SHAPE_MASK: 
@PRIVATE_GTK_IN_REPARENT: 
@PRIVATE_GTK_DIRECTION_SET: 
@PRIVATE_GTK_DIRECTION_LTR: 

<!-- ##### USER_FUNCTION GtkSignalDestroy ##### -->
<para>
A function which you can use to clean up when the
signal handler is destroyed.
</para>
<para>
For example, if your handler requires a few variables
that you made into a struct and allocated (using g_new()
or something), then you will probably want to free
it as soon as the hook is destroyed.  This will
allow you to do that. (For this in particular
it is convenient to pass g_free() as a #GtkSignalDestroy
function).
</para>

@data: The user data associated with the hook that is being
destroyed.

<!-- ##### USER_FUNCTION GtkSignalMarshal ##### -->
<para>
This is currently a hack left in for a scheme wrapper library.
It may be removed.
</para>
<para>
Don't use it.
</para>

@object: The object which emits the signal.
@data: The user data associated with the hook.
@nparams: The number of parameters to the function.
@args: The actual values of the arguments.
@arg_types: The types of the arguments.
@return_type: The type of the return value from the function
or #GTK_TYPE_NONE for no return value.

<!-- ##### STRUCT GtkSignalQuery ##### -->
<para>
This structure contains all the information about a particular
signal:  its name, the type it affects, the signature of the handlers,
and its unique identifying integer.
</para>

@object_type: 
@signal_id: 
@signal_name: 
@is_user_signal: 
@signal_flags: 
@return_val: 
@nparams: 
@params: 

<!-- ##### ARG GtkSpinButton:shadow-type ##### -->
<para>
the type of border that surrounds the arrows of a spin button.
</para>


<!-- ##### STRUCT GtkStatusbarMsg ##### -->
<para>
Holds the data for a statusbar message. <structfield>text</structfield> holds the actual text string. <structfield>context_id</structfield> is the context that this message is associated with, and <structfield>message_id</structfield> is this particular message's identifier. However, these fields should not be modified directly.
</para>

@text: 
@context_id: 
@message_id: 

<!-- ##### ARG GtkTextTag:justify ##### -->
<para>
A #GtkJustification for the text. This is only used when the tag is
applied to the first character in a paragraph.
</para>


<!-- ##### ARG GtkTextTag:left-wrapped-line-margin ##### -->
<para>
Pixel width of the left margin of the text for lines after the first
line in a wrapped paragraph.
</para>


<!-- ##### ARG GtkTextTag:left-wrapped-line-margin-set ##### -->
<para>

</para>


<!-- ##### ARG GtkTextTag:offset ##### -->
<para>
Pixels to offset the text horizontally or vertically, useful to
produce superscript and subscript.
</para>


<!-- ##### ARG GtkTextView:justify ##### -->
<para>

</para>


<!-- ##### ARG GtkVScale:adjustment ##### -->
<para>
the #GtkAdjustment which sets the range of the scale.
</para>


<!-- ##### ARG GtkVScrollbar:adjustment ##### -->
<para>

</para>


<!-- ##### SIGNAL GtkWidget::activate-mnemonic ##### -->
<para>

</para>

@widget: the object which received the signal.
@arg1: 
@Returns: 

<!-- ##### SIGNAL GtkWidget::debug-msg ##### -->
<para>

</para>

@widget: the object which received the signal.
@message: 

<!-- ##### SIGNAL GtkWidget::draw ##### -->
<para>

</para>

@widget: the object which received the signal.
@area: 

<!-- ##### SIGNAL GtkWidget::draw-default ##### -->
<para>

</para>

@widget: the object which received the signal.

<!-- ##### SIGNAL GtkWidget::draw-focus ##### -->
<para>

</para>

@widget: the object which received the signal.

<!-- ##### FUNCTION gtk_button_box_child_requisition ##### -->
<para>
This is an internally used function and should never be called from an
application.
</para>

@widget: 
@nvis_children: 
@width: 
@height: 

<!-- ##### FUNCTION gtk_button_box_get_child_ipadding_default ##### -->
<para>
The internal padding of a button is the amount of space between the outside
of the button and the widget it contains. This function gets the default
amount of horizontal and vertical padding, placing the results in @ipad_x
and @ipad_y, respectively.
</para>

@ipad_x: the default horizontal internal button padding.
@ipad_y: the default vertical internal button padding.

<!-- ##### FUNCTION gtk_button_box_get_child_size_default ##### -->
<para>
Retrieves the default minimum width and height for all button boxes, and
places the values in @min_width and @min_height, respectively.
</para>

@min_width: the default minimum width of a child widget.
@min_height: the default minimum height of a child widget.

<!-- ##### FUNCTION gtk_button_box_set_child_ipadding_default ##### -->
<para>
Sets the default number of pixels that pad each button in every button box.
</para>

@ipad_x: new default horizontal padding.
@ipad_y: new default vertical padding.

<!-- ##### FUNCTION gtk_button_box_set_child_size_default ##### -->
<para>
Sets the default size of child buttons.
</para>

@min_width: minimum default width for child buttons.
@min_height: minimum default height for child buttons.

<!-- ##### FUNCTION gtk_button_new_accel ##### -->
<para>

</para>

@uline_label: 
@accel_group: 
@Returns: 

<!-- ##### FUNCTION gtk_button_new_stock ##### -->
<para>

</para>

@stock_id: 
@accel_group: 
@Returns: 

<!-- ##### FUNCTION gtk_clist_construct ##### -->
<para>
Initializes a previously allocated #GtkCList widget for use.  This should not
normally be used to create a #GtkCList widget.  Use gtk_clist_new() instead.
</para>

@clist: A pointer to an uninitialized #GtkCList widget.
@columns: The number of columns the #GtkCList should have.
@titles: An array of strings that should be used as the titles i
of the columns.  There should be enough strings in the array for
the number of columns specified.

<!-- ##### FUNCTION gtk_color_selection_get_old_color ##### -->
<para>

</para>

@colorsel: 
@color: 

<!-- ##### FUNCTION gtk_color_selection_get_use_opacity ##### -->
<para>

</para>

@colorsel: 
@Returns: 

<!-- ##### FUNCTION gtk_color_selection_get_use_palette ##### -->
<para>

</para>

@colorsel: 
@Returns: 

<!-- ##### FUNCTION gtk_color_selection_set_old_color ##### -->
<para>

</para>

@colorsel: 
@color: 

<!-- ##### FUNCTION gtk_color_selection_set_opacity ##### -->
<para>
Controls whether opacity can be set with the #GtkColorSelection.
If this functionality is enabled, the necessary additional widgets
are added to the #GtkColorSelection and the opacity value can be
retrieved via the fourth value in the color array returned by
the gtk_color_selection_get_color() function.
</para>

@colorsel: a #GtkColorSelection.
@use_opacity: a boolean indicating whether the opacity selection
is enabled.

<!-- ##### FUNCTION gtk_color_selection_set_use_opacity ##### -->
<para>

</para>

@colorsel: 
@use_opacity: 

<!-- ##### FUNCTION gtk_color_selection_set_use_palette ##### -->
<para>

</para>

@colorsel: 
@use_palette: 

<!-- ##### FUNCTION gtk_container_focus ##### -->
<para>

</para>

@container: 
@direction: 
@Returns: 

<!-- ##### FUNCTION gtk_ctree_construct ##### -->
<para>
This function is not usually used by users.
</para>

@ctree: 
@columns: 
@tree_column: 
@titles: 

<!-- ##### FUNCTION gtk_editable_changed ##### -->
<para>
Causes the "changed" signal to be emitted.
</para>

@editable: a #GtkEditable widget.

<!-- ##### FUNCTION gtk_editable_claim_selection ##### -->
<para>
Claim or disclaim ownership of the PRIMARY X selection.
</para>

@editable: a #GtkEditable widget.
@claim: if %TRUE, claim the selection, otherwise, disclaim it.
@time: the timestamp for claiming the selection.

<!-- ##### FUNCTION gtk_font_selection_dialog_set_filter ##### -->
<para>
Sets one of the two font filters, to limit the fonts shown.
</para>

@fsd: a #GtkFontSelectionDialog.
@filter_type: which of the two font filters to set, either
#GTK_FONT_FILTER_BASE or #GTK_FONT_FILTER_USER. The user filter
can be changed by the user, but the base filter is permanent.
@font_type: the types of font to be shown. This is a bitwise combination of
#GTK_FONT_BITMAP, #GTK_FONT_SCALABLE and #GTK_FONT_SCALABLE_BITMAP,
or #GTK_FONT_ALL to show all three font types.
@foundries: a NULL-terminated array of strings containing foundry names which
will be shown, or NULL to show all foundries.
@weights: a NULL-terminated array of strings containing weight names which
will be shown, or NULL to show all weights.
@slants: a NULL-terminated array of strings containing slant names which
will be shown, or NULL to show all slants.
@setwidths: a NULL-terminated array of strings containing setwidth names which
will be shown, or NULL to show all setwidths.
@spacings: a NULL-terminated array of strings containing spacings which
will be shown, or NULL to show all spacings.
@charsets: a NULL-terminated array of strings containing charset names which
will be shown, or NULL to show all charsets.

<!-- ##### FUNCTION gtk_font_selection_set_filter ##### -->
<para>
Sets one of the two font filters, to limit the fonts shown.
</para>

@fontsel: a #GtkFontSelection.
@filter_type: which of the two font filters to set, either
#GTK_FONT_FILTER_BASE or #GTK_FONT_FILTER_USER. The user filter
can be changed by the user, but the base filter is permanent.
@font_type: the types of font to be shown. This is a bitwise combination of
#GTK_FONT_BITMAP, #GTK_FONT_SCALABLE and #GTK_FONT_SCALABLE_BITMAP,
or #GTK_FONT_ALL to show all three font types.
@foundries: a NULL-terminated array of strings containing foundry names which
will be shown, or NULL to show all foundries.
@weights: a NULL-terminated array of strings containing weight names which
will be shown, or NULL to show all weights.
@slants: a NULL-terminated array of strings containing slant names which
will be shown, or NULL to show all slants.
@setwidths: a NULL-terminated array of strings containing setwidth names which
will be shown, or NULL to show all setwidths.
@spacings: a NULL-terminated array of strings containing spacings which
will be shown, or NULL to show all spacings.
@charsets: a NULL-terminated array of strings containing charset names which
will be shown, or NULL to show all charsets.

<!-- ##### FUNCTION gtk_identifier_get_type ##### -->
<para>
Get the type of GtkIdentifier.
</para>

@Returns: GtkType -- the enumerated type of something.

<!-- ##### FUNCTION gtk_image_menu_item_add_image ##### -->
<para>

</para>

@image_menu_item: 
@child: 

<!-- ##### FUNCTION gtk_label_set_markup_with_accel ##### -->
<para>

</para>

@label: 
@str: 
@Returns: 

<!-- ##### FUNCTION gtk_list_store_set_cell ##### -->
<para>

</para>

@store: 
@iter: 
@column: 
@value: 

<!-- ##### FUNCTION gtk_menu_ensure_uline_accel_group ##### -->
<para>

</para>

@menu: 
@Returns: 

<!-- ##### FUNCTION gtk_menu_get_uline_accel_group ##### -->
<para>

</para>

@menu: 
@Returns: 

<!-- ##### FUNCTION gtk_object_arg_get ##### -->
<para>
Private function to get an argument and argument info from an object.
</para>

@object: the object whose argument should be retrieved.
@arg: the argument, for the name on input, the rest is filled on output.
@info: a #GtkArgInfo structure to optionally fill in.

<!-- ##### FUNCTION gtk_object_arg_get_info ##### -->
<para>
Query information about an argument type.
</para>

@object_type: type of object to query about.
@arg_name: name of the argument.
@info_p: pointer to be filled in with a pointer to the GtkArgInfo.
@Returns: an error message, or NULL on success.
It is the caller's responsibility to call g_free() in the event of error.

<!-- ##### FUNCTION gtk_object_arg_set ##### -->
<para>
Private function to set an argument and argument info to an object.
</para>

@object: the object whose argument should be set.
@arg: the argument.
@info: infomation about this type of argument in general.

<!-- ##### FUNCTION gtk_object_args_collect ##### -->
<para>
Private: Gets an array of #GtkArgs from a va_list C structure.
</para>

@object_type: the type of object to collect arguments for.
@arg_list_p: pointer to be filled in with a list of parsed arguments.
@info_list_p: optional pointer for a returned list #GtkArgInfos.
@first_arg_name: name of first argument.
@var_args: value of first argument, followed by more key/value pairs,
terminated by NULL.
@Returns: an error message, or NULL on success.
It is the caller's responsibility to call g_free() in the event of error.

<!-- ##### FUNCTION gtk_object_class_add_signals ##### -->
<para>
Add an array of signals to a #GtkObjectClass.
Usually this is called when registering a new type of object.
</para>

@klass: the object class to append signals to.
@signals: the signals to append.
@nsignals: the number of signals being appended.

<!-- ##### FUNCTION gtk_object_class_user_signal_new ##### -->
<para>
Define a signal-handler for a new signal on an already defined
object.
</para>
<para>
See the signal documentation for more general information.
</para>

@klass: the object class to define the signal for.
@name: the name of the signal.
@signal_flags: the default emission behavior for the signal.
See gtk_signal_new().
@marshaller: a function that will take an array of GtkArgs
and invoke the appropriate handler with the normal calling
conventions.
@return_val: specify the return-value type for the signal
(or GTK_TYPE_NONE for no return-value).
@nparams: specify the number of parameters the signal
receives from the caller of gtk_signal_emit().
@Varargs: list of nparams #GtkTypes to pass to the signal handlers.
@Returns: the signal id.  (See #GtkSignals)

<!-- ##### FUNCTION gtk_object_class_user_signal_newv ##### -->
<para>
Define a signal-handler for a new signal on an already defined
object.
</para>

@klass: the object class to define the signal for.
@name: the name of the signal.
@signal_flags: the default emission behavior for the signal.
See gtk_signal_new().
@marshaller: takes a GtkObject, a #GtkSignalFunc, and an array
of arguments, and invokes the function using the appropriate
calling conventions.  Usually just select a function
out of gtkmarshal.h.
@return_val: specify the return-value type for the signal (possibly
#GTK_TYPE_NONE).
@nparams: specify the number of parameters the signal
receives from the caller of gtk_signal_emit().
@params: array of #GtkTypes the signal handlers for this signal
should have in their prototype (of length nparams).
@Returns: the signal id.  (See #GtkSignals)

<!-- ##### FUNCTION gtk_object_constructed ##### -->
<para>
Mark an allocated object as constructed.
This is used for situations
that require precise control of the construction process.
</para>
<para>
This is done when gtk_object_default_construct() is inadequate.
In #GtkCList the need arises because #GtkCList does construction work that
must happen <emphasis>after</emphasis> its derivers.  This work
cannot be done in an initializer function, so an alternate
constructor is mandatory.  It calls gtk_object_constructed() to
indicate it has done its job, so that no other constructor will
be invoked.
</para>
<para>
Normally this function is just automatically run from
gtk_object_default_construct().
</para>

@object: object which has been constructed.  This is usually
done automatically by gtk_object_new() and gtk_object_newv().

<!-- ##### FUNCTION gtk_object_default_construct ##### -->
<para>
This function is called to construct arguments that haven't been initialized
but have the #GTK_ARG_CONSTRUCT flag set.
</para>
<para>
All number arguments are set to 0.  All pointers and strings
are set to NULL.
</para>
<para>
Normally invoked by gtk_object_new() automatically; gtk_type_new() can
be used to bypass it.
</para>

@object: the object to initialize.

<!-- ##### FUNCTION gtk_object_getv ##### -->
<para>
Gets an array of argument values from an object.
</para>

@object: the object to get arguments from.
@n_args: the number of arguments to query.
@args: the arguments to fill in.

<!-- ##### FUNCTION gtk_object_newv ##### -->
<para>
Construct an object with an array of arguments.
</para>

@object_type: the type of the object to create.
@n_args: the number of arguments to set.
@args: an array of n_args arguments (which are name and value pairs).
@Returns: the new GtkObject.

<!-- ##### FUNCTION gtk_object_query_args ##### -->
<para>
Get all the arguments that may be used for a given type.
</para>
<para>
In Java, this type of mechanism is called 
<wordasword>introspection</wordasword>.  It is used by applications
like Glade, that have to determine what can be done to an object
at run-time.
</para>

@class_type: the GtkType of the ObjectClass
(returned from GTK_OBJECT_CLASS(class)-&gt;type for example).
@arg_flags: if non-NULL, obtains the #GtkArgFlags that apply to
each argument.  You must g_free() this if you request it.
@n_args: the number of arguments is returned in this field.
@Returns: an array of arguments, that you must deallocate with g_free().

<!-- ##### FUNCTION gtk_object_setv ##### -->
<para>
Set an array of arguments.
</para>

@object: the object whose arguments should be set.
@n_args: the number of arguments to set.
@args: the desired values, as an array of #GtkArgs (which contain 
the names, types, and values of the arguments).

<!-- ##### FUNCTION gtk_paned_compute_position ##### -->
<para>
Internal function used by #GtkHPaned and #GtkVPaned
</para>

@paned: 
@allocation: 
@child1_req: 
@child2_req: 

<!-- ##### FUNCTION gtk_paned_set_handle_size ##### -->
<para>
Set the the handle size to @size x @size pixels.
</para>

@paned: a paned widget
@size: the size in pixels

<!-- ##### FUNCTION gtk_pattern_match ##### -->
<para>

</para>

@pspec: 
@string_length: 
@string: 
@string_reversed: 
@Returns: 

<!-- ##### FUNCTION gtk_pattern_match_simple ##### -->
<para>

</para>

@pattern: 
@string: 
@Returns: 

<!-- ##### FUNCTION gtk_pattern_match_string ##### -->
<para>

</para>

@pspec: 
@string: 
@Returns: 

<!-- ##### FUNCTION gtk_pattern_spec_free_segs ##### -->
<para>

</para>

@pspec: 

<!-- ##### FUNCTION gtk_pattern_spec_init ##### -->
<para>

</para>

@pspec: 
@pattern: 

<!-- ##### FUNCTION gtk_rc_init ##### -->
<para>
Internal function.
</para>


<!-- ##### FUNCTION gtk_ruler_draw_pos ##### -->
<para>

</para>

@ruler: the gtkruler

<!-- ##### FUNCTION gtk_ruler_draw_ticks ##### -->
<para>

</para>

@ruler: the gtkruler

<!-- ##### FUNCTION gtk_signal_add_emission_hook ##### -->
<para>
Add an emission hook for a type of signal, for any object.
</para>

@signal_id: the type of signal to hook for.
@hook_func: the function to invoke to handle the emission hook.
@data: the user data passed in to hook_func.
@Returns: the id (that you may pass as a parameter
to gtk_signal_remove_emission_hook()).
@i: 
@h: 
@d: 

<!-- ##### FUNCTION gtk_signal_add_emission_hook_full ##### -->
<para>
Add an emission hook for a type of signal, for any object.
(with control of what happens when the hook is
destroyed).
</para>

@signal_id: the type of signal add the hook for.
@hook_func: the function to invoke to handle the hook.
@data: the user data passed in to hook_func.
@destroy: a function to invoke when the hook is destroyed,
to clean up any allocation done just for this
signal handler.
@Returns: the id (that you may pass as a parameter
to gtk_signal_remove_emission_hook()).

<!-- ##### FUNCTION gtk_signal_handler_pending_by_id ##### -->
<para>
Returns whether a connection id is valid (and optionally not blocked).
</para>

@object: the object to search for the desired handler.
@handler_id: the connection id.
@may_be_blocked: whether it is acceptable to return a blocked
handler.
@Returns: TRUE if the signal exists and wasn't blocked,
unless #may_be_blocked was specified.  FALSE otherwise.

<!-- ##### FUNCTION gtk_signal_handlers_destroy ##### -->
<para>
Destroy all the signal handlers connected to an object.
This is done automatically when the object is destroyed.
</para>
<para>
This function is labeled private.
</para>

@object: the object whose signal handlers should be destroyed.

<!-- ##### FUNCTION gtk_signal_init ##### -->
<para>

</para>


<!-- ##### FUNCTION gtk_signal_n_emissions ##### -->
<para>
Find out the recursion depth of emissions for a particular type
of signal and object.  (So it will
always return 0 or 1 if #GTK_RUN_NO_RECURSE is specified)
This is a way to avoid recursion:  you can see if
you are currently running in that signal handler and emit it only
if you are.
</para>
<para>Another way to look at it is that this number increases
by one when #gtk_signal_emit(), et al, are called,
and decreases by one when #gtk_signal_emit() returns.
</para>

@object: the object with the signal handler.
@signal_id: the signal id.
@Returns: the recursion depth of emissions of this signal for this
object.

<!-- ##### FUNCTION gtk_signal_n_emissions_by_name ##### -->
<para>
Find out the recursion depth of emissions for a particular type
of signal and object.  Just like gtk_signal_n_emissions()
except it will lookup the signal id for you.
</para>

@object: the object with the signal handler.
@name: the signal name.
@Returns: the recursion depth of emissions of this signal for this
object.

<!-- ##### FUNCTION gtk_signal_query ##### -->
<para>
Obtain information about a signal.
</para>

@signal_id: the signal type identifier.
@Returns: a pointer to a GtkSignalQuery structure
which contains all the information, or NULL.
The pointer is allocated just for you:  you must g_free() it.

<!-- ##### FUNCTION gtk_signal_remove_emission_hook ##### -->
<para>
Delete an emission hook. (see gtk_signal_add_emission_hook())
</para>

@signal_id: the id of the signal type.
@hook_id: the id of the emission handler, returned by add_emission_hook().
@i: 
@h: 

<!-- ##### FUNCTION gtk_signal_set_funcs ##### -->
<para>
These set default functions to call when the user didn't
supply a function when connecting.  (These are rarely
used, and probably only for language bindings)
</para>
<para>
By default, there are no such functions.
</para>

@marshal_func: the function to invoke on every handlers for which there
isn't a function pointer.  May be NULL.
@destroy_func: the function to invoke when each hook is destroyed.
May be NULL.

<!-- ##### FUNCTION gtk_spin_button_set_shadow_type ##### -->
<para>
Creates a border around the arrows of a #GtkSpinButton. The type of border is determined by @shadow_type.
</para>

@spin_button: a #GtkSpinButton
@shadow_type: the new border type.

<!-- ##### FUNCTION gtk_stock_list_items ##### -->
<para>

</para>

@Returns: 

<!-- ##### FUNCTION gtk_text_iter_reorder ##### -->
<para>

</para>

@first: 
@second: 

<!-- ##### FUNCTION gtk_trace_referencing ##### -->
<para>
Private: print debugging information while doing a gtk_object_ref() or 
a gtk_object_unref().
</para>

@object: object to reference or unreference.
@func: name of caller's function to print (used within macros).
@dummy: unused.
@line: line number (used within macros).
@do_ref: whether to reference or unreference.

<!-- ##### FUNCTION gtk_tree_model_ref_iter ##### -->
<para>

</para>

@tree_model: 
@iter: 

<!-- ##### FUNCTION gtk_tree_model_sort_set_compare ##### -->
<para>

</para>

@tree_model_sort: 
@func: 

<!-- ##### FUNCTION gtk_tree_model_sort_set_sort_column ##### -->
<para>

</para>

@tree_model_sort: 
@sort_col: 

<!-- ##### FUNCTION gtk_tree_model_unref_iter ##### -->
<para>

</para>

@tree_model: 
@iter: 

<!-- ##### FUNCTION gtk_tree_store_set_cell ##### -->
<para>

</para>

@tree_store: 
@iter: 
@column: 
@value: 

<!-- ##### FUNCTION gtk_tree_view_column_set_cell_data ##### -->
<para>

</para>

@tree_column: 
@tree_model: 
@iter: 

<!-- ##### FUNCTION gtk_type_check_class_cast ##### -->
<para>
Given a GtkTypeClass pointer @klass, and a GtkType @cast_type, make
sure that it's okay to cast something of that @klass into a @cast_type.
</para>

@klass: GtkTypeClass*
@cast_type: GtkType
@Returns: Always return @klass.

<!-- ##### FUNCTION gtk_type_check_object_cast ##### -->
<para>
Given a pointer to a GtkTypeObject @type_object, and a GtkType @cast_type,
make sure that it's okay to cast @type_object into a @cast_type.
</para>

@type_object: GtkTypeObject*
@cast_type: GtkType
@Returns: the same GtkTypeObject* as @type_object

<!-- ##### FUNCTION gtk_type_children_types ##### -->
<para>
Return the pointer to the type's children's types.
</para>

@type: GtkType
@Returns: pointer to a GList

<!-- ##### FUNCTION gtk_type_describe_heritage ##### -->
<para>
Print the types @type inherits from.
</para>

@type: GtkType

<!-- ##### FUNCTION gtk_type_describe_tree ##### -->
<para>
Given a @type, describe all of its children, and their children.  Only
show the size if @show_size is true.
</para>

@type: GtkType
@show_size: gboolean

<!-- ##### FUNCTION gtk_type_free ##### -->
<para>
Given the type of an object and a pointer to it, the object is freed.
</para>

@type: GtkType
@mem: gpointer to the object

<!-- ##### FUNCTION gtk_type_get_varargs_type ##### -->
<para>
Get the varargs type associated with @foreign_type
</para>

@foreign_type: GtkType
@Returns: GtkType

<!-- ##### FUNCTION gtk_type_parent_class ##### -->
<para>
Return the class of the parent.  Initialize the class if necessary.
Return NULL if anything goes wrong.
</para>

@type: GtkType
@Returns: gpointer to the klass.

<!-- ##### FUNCTION gtk_type_query ##### -->
<para>
Given a type, return various interesting parameters of the type.
</para>

@type: GtkType
@Returns: GtkTypeQuery*

<!-- ##### FUNCTION gtk_type_register_enum ##### -->
<para>
Register a new set of enum @values and give them the name in
@type_name.
</para>

@type_name: must not be null.
@values: GtkEnumValue*
@Returns: 

<!-- ##### FUNCTION gtk_type_register_flags ##### -->
<para>
Register a new set of flags @values and give them the name in
@type_name.
</para>

@type_name: must not be null.
@values: GtkFlagValue*
@Returns: 

<!-- ##### FUNCTION gtk_type_set_chunk_alloc ##### -->
<para>
Set the mem_chunk size so it will hold @n_chunks of the objects of that @type.
</para>

@type: There must be an unlocked TypeNode associated with this type otherwise nothing happens.
@n_chunks: 

<!-- ##### FUNCTION gtk_type_set_varargs_type ##### -->
<para>
Set the varargs type for a fundamental type @foreign_type.
</para>

@foreign_type: Must be a GtkType with a sequence number of zero.  Must not be a
fundamental type.
@varargs_type: Must be a GtkType which is either structured or flag, or NONE.

<!-- ##### FUNCTION gtk_widget_activate_mnemonic ##### -->
<para>

</para>

@widget: 
@group_cycling: 
@Returns: 

<!-- ##### FUNCTION gtk_widget_popup ##### -->
<para>

</para>

@widget: 
@x: 
@y: 

<!-- ##### FUNCTION gtk_window_activate_mnemonic ##### -->
<para>

</para>

@window: 
@keyval: 
@modifier: 
@Returns: 

<!-- ##### FUNCTION gtk_window_get_default_accel_group ##### -->
<para>

</para>

@window: 
@Returns: 

<!-- ##### FUNCTION gtk_window_set_decorations_hint ##### -->
<para>

</para>

@window: 
@decorations: 

<!-- ##### FUNCTION gtk_window_set_functions_hint ##### -->
<para>

</para>

@window: 
@functions: 

