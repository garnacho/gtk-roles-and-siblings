<!-- ##### SECTION ./tmpl/gtkdebug.sgml:Title ##### -->
Debugging


<!-- ##### SECTION ./tmpl/gtkdebug.sgml:Short_Description ##### -->



<!-- ##### MACRO gtk_marshal_NONE__BOXED ##### -->
<para>

</para>


<!-- ##### SECTION ./tmpl/gtkclipboard.sgml:See_Also ##### -->
<para>
<variablelist>

<varlistentry>
<term>#GtkSelection</term>
<listitem><para>@GtkClipboard provides a high-level wrapper around the
	    lower level routines that deal with X selections. It is
	    also possibly to directly manipulate the X selections,
	    though it is seldom necessary to do so.</para></listitem>
</varlistentry>

</variablelist>
</para>


<!-- ##### FUNCTION gtk_clipboard_get ##### -->
<para>

</para>

@selection: 
@Returns: 

<!-- ##### SECTION ./tmpl/gtkmenufactory.sgml:Short_Description ##### -->



<!-- ##### MACRO gtk_marshal_NONE__UINT_STRING ##### -->
<para>

</para>


<!-- ##### MACRO GTK_PRIVATE_UNSET_FLAG ##### -->
<para>

</para>

@wid: 
@flag: 

<!-- ##### MACRO GTK_WIDGET_REDRAW_PENDING ##### -->
<para>

</para>

@obj: 

<!-- ##### MACRO gtk_marshal_NONE__ENUM_FLOAT ##### -->
<para>

</para>


<!-- ##### MACRO gtk_widget_set_default_visual ##### -->
<para>

</para>

@v: 
@visual: 

<!-- ##### FUNCTION gtk_window_set_focus ##### -->
<para>

</para>

@window: 
@focus: 

<!-- ##### SECTION ./tmpl/gtkprivate.sgml:See_Also ##### -->
<para>

</para>


<!-- ##### MACRO gtk_marshal_NONE__POINTER_UINT_ENUM ##### -->
<para>

</para>


<!-- ##### SECTION ./tmpl/gtkmenufactory.sgml:See_Also ##### -->
<para>

</para>


<!-- ##### FUNCTION gtk_font_selection_set_filter ##### -->
<para>
Sets one of the two font filters, to limit the fonts shown.
</para>

@fontsel: a #GtkFontSelection.
@filter_type: which of the two font filters to set, either
#GTK_FONT_FILTER_BASE or #GTK_FONT_FILTER_USER. The user filter
can be changed by the user, but the base filter is permanent.
@font_type: the types of font to be shown. This is a bitwise combination of
#GTK_FONT_BITMAP, #GTK_FONT_SCALABLE and #GTK_FONT_SCALABLE_BITMAP,
or #GTK_FONT_ALL to show all three font types.
@foundries: a NULL-terminated array of strings containing foundry names which
will be shown, or NULL to show all foundries.
@weights: a NULL-terminated array of strings containing weight names which
will be shown, or NULL to show all weights.
@slants: a NULL-terminated array of strings containing slant names which
will be shown, or NULL to show all slants.
@setwidths: a NULL-terminated array of strings containing setwidth names which
will be shown, or NULL to show all setwidths.
@spacings: a NULL-terminated array of strings containing spacings which
will be shown, or NULL to show all spacings.
@charsets: a NULL-terminated array of strings containing charset names which
will be shown, or NULL to show all charsets.

<!-- ##### FUNCTION gtk_container_unregister_toplevel ##### -->
<para>

</para>

@container: 

<!-- ##### SECTION ./tmpl/gtkenums.sgml.sgml:Long_Description ##### -->
<para>

</para>


<!-- ##### STRUCT GtkTypeQuery ##### -->
<para>
A structure used to return values from @gtk_type_query.
</para>

@type: 
@type_name: 
@object_size: 
@class_size: 

<!-- ##### FUNCTION gtk_text_buffer_get_clipboard_contents ##### -->
<para>

</para>

@buffer: 
@Returns: 

<!-- ##### MACRO gtk_widget_pop_visual ##### -->
<para>

</para>

@v: 

<!-- ##### FUNCTION gtk_marshal_NONE__C_CALLBACK ##### -->
<para>

</para>

@object: 
@func: 
@func_data: 
@args: 

<!-- ##### FUNCTION gtk_text_buffer_paste_primary_selection ##### -->
<para>

</para>

@buffer: 
@override_location: 
@time: 
@interactive: 
@default_editable: 

<!-- ##### FUNCTION gtk_marshal_BOOL__POINTER_INT_INT ##### -->
<para>

</para>

@object: 
@func: 
@func_data: 
@args: 

<!-- ##### FUNCTION gtk_clipboard_set_with_data ##### -->
<para>

</para>

@clipboard: 
@targets: 
@n_targets: 
@get_func: 
@clear_func: 
@user_data: 
@Returns: 

<!-- ##### SIGNAL GtkTextView::copy-text ##### -->
<para>

</para>

@textview: the object which received the signal.

<!-- ##### FUNCTION gtk_text_view_get_iter_at_pixel ##### -->
<para>

</para>

@text_view: 
@iter: 
@x: 
@y: 

<!-- ##### USER_FUNCTION GtkClipboardReceivedFunc ##### -->
<para>
    A function to be called when the results of gtk_clipboard_request_text()
    are received, or when the request fails.
</para>

@clipboard: the #GtkClipboard
@selection_data: a #GtkSelectionData containing the data was received.
                 If retrieving the data failed, then then length field
                 of @selection_data will be negative.
@data: the @user_data supplied to gtk_clipboard_request_contents().

<!-- ##### FUNCTION gtk_clipboard_clear ##### -->
<para>

</para>

@clipboard: 

<!-- ##### FUNCTION gtk_clipboard_wait_for_contents ##### -->
<para>

</para>

@clipboard: 
@target: 
@Returns: 

<!-- ##### SECTION ./tmpl/gtkenums.sgml.sgml:Short_Description ##### -->



<!-- ##### FUNCTION gtk_identifier_get_type ##### -->
<para>
Get the type of GtkIdentifier.
</para>

@Returns: GtkType -- the enumerated type of something.

<!-- ##### MACRO gtk_marshal_BOOL__POINTER_INT_INT_UINT ##### -->
<para>

</para>


<!-- ##### FUNCTION gtk_marshal_NONE__POINTER_POINTER ##### -->
<para>

</para>

@object: 
@func: 
@func_data: 
@args: 

<!-- ##### FUNCTION gtk_marshal_NONE__INT_INT ##### -->
<para>

</para>

@object: 
@func: 
@func_data: 
@args: 

<!-- ##### FUNCTION gtk_marshal_NONE__NONE ##### -->
<para>

</para>

@object: 
@func: 
@func_data: 
@args: 

<!-- ##### FUNCTION gtk_text_mark_deleted ##### -->
<para>

</para>

@mark: 
@Returns: 

<!-- ##### MACRO gtk_marshal_BOOL__POINTER_STRING_STRING_POINTER ##### -->
<para>

</para>


<!-- ##### FUNCTION gtk_ruler_draw_ticks ##### -->
<para>

</para>

@ruler: the gtkruler

<!-- ##### FUNCTION gtk_selection_data_set_text ##### -->
<para>

</para>

@selection_data: 
@str: 
@Returns: 

<!-- ##### FUNCTION gtk_themes_init ##### -->
<para>

</para>

@argc: 
@argv: 

<!-- ##### FUNCTION gtk_type_register_enum ##### -->
<para>
Register a new set of enum @values and give them the name in
@type_name.
</para>

@type_name: must not be null.
@values: GtkEnumValue*
@Returns: 

<!-- ##### SECTION ./tmpl/gtkmenufactory.sgml:Title ##### -->
Menu Factory


<!-- ##### VARIABLE gtk_debug_flags ##### -->
<para>

</para>


<!-- ##### MACRO gtk_widget_set_visual ##### -->
<para>

</para>

@w: 
@v: 
@widget: 
@visual: 

<!-- ##### MACRO gtk_marshal_NONE__UINT_POINTER_UINT_ENUM_ENUM_POINTER ##### -->
<para>

</para>


<!-- ##### MACRO GTK_TYPE_SEQNO ##### -->
<para>
Convert a gtk type into its sequence number
</para>

@type: 

<!-- ##### SECTION ./tmpl/gtkimcontextsimple.sgml:See_Also ##### -->
<para>

</para>


<!-- ##### ENUM GtkMenuFactoryType ##### -->
<para>

</para>

@GTK_MENU_FACTORY_MENU: 
@GTK_MENU_FACTORY_MENU_BAR: 
@GTK_MENU_FACTORY_OPTION_MENU: 

<!-- ##### MACRO gtk_marshal_NONE__STRING ##### -->
<para>

</para>


<!-- ##### MACRO gtk_marshal_NONE__POINTER_POINTER_UINT_UINT ##### -->
<para>

</para>


<!-- ##### USER_FUNCTION GtkClipboardClearFunc ##### -->
<para>
A function that will be called when the contents of the clipboard are changed
or cleared. Once this has called, the @user_data_or_owner argument
will not be used again.
</para>

@clipboard: the #GtkClipboard
@user_data_or_owner: the @user_data argument passed to gtk_clipboard_set_with_data(), or
                     the @owner argument passed to gtk_clipboard_set_owner()

<!-- ##### MACRO GTK_WIDGET_IS_OFFSCREEN ##### -->
<para>

</para>

@obj: 

<!-- ##### MACRO GTK_MAX_COMPOSE_LEN ##### -->
<para>

</para>


<!-- ##### SECTION ./tmpl/gtkprivate.sgml:Short_Description ##### -->



<!-- ##### SIGNAL GtkTextView::cut-text ##### -->
<para>

</para>

@textview: the object which received the signal.

<!-- ##### STRUCT GtkDialogButton ##### -->
<para>
Deprecated.
</para>


<!-- ##### FUNCTION gtk_marshal_BOOL__POINTER ##### -->
<para>

</para>

@object: 
@func: 
@func_data: 
@args: 

<!-- ##### ARG GtkTextTag:overstrike_set ##### -->
<para>

</para>


<!-- ##### FUNCTION gtk_text_buffer_cut ##### -->
<para>

</para>

@buffer: 
@time: 
@interactive: 
@default_editable: 

<!-- ##### ENUM GtkTextViewMovementStep ##### -->
<para>

</para>

@GTK_TEXT_MOVEMENT_CHAR: 
@GTK_TEXT_MOVEMENT_POSITIONS: 
@GTK_TEXT_MOVEMENT_WORD: 
@GTK_TEXT_MOVEMENT_WRAPPED_LINE: 
@GTK_TEXT_MOVEMENT_LINE: 
@GTK_TEXT_MOVEMENT_LINE_ENDS: 
@GTK_TEXT_MOVEMENT_BUFFER_ENDS: 

<!-- ##### FUNCTION gtk_marshal_NONE__POINTER_POINTER_INT_INT ##### -->
<para>

</para>

@object: 
@func: 
@func_data: 
@args: 

<!-- ##### SECTION ./tmpl/gtkclipboard.sgml:Long_Description ##### -->
  <para>
    The #GtkClipboard object represents a clipboard of data shared
    between different processes or between different widgets in
    the same process. Each clipboard is identified by a name encoded as a
    #GdkAtom. (Conversion to and from strings can be done with
    gdk_atom_intern() and gdk_atom_name().) The default clipboard
    corresponds to the CLIPBOARD atom; another commonly used clipboard
    is the PRIMARY clipboard, which, in X, traditionally contains
    the currently selected text. 
  </para>
  <para>
    To support having a number of different formats on the clipboard
    at the same time, the clipboard mechanism allows providing
    callbacks instead of the actual data.  When you set the contents
    of the clipboard, you can either supply the data directly (via
    functions like gtk_clipboard_set_text()), or you can supply a
    callback to be called at a later time when the data is needed (via
    gtk_clipboard_set_with_data() or gtk_clipboard_set_with_owner().)
    Providing a callback also avoids having to make copies of the data
    when it is not needed.
  </para>
  <para>
    gtk_clipboard_set_with_data() and gtk_clipboard_set_with_owner()
    are quite similar; the choice between the two depends mostly on
    which is more convenient in a particular situation.
    The former is most useful when you want to have a blob of data
    with callbacks to convert it into the various data types that you
    advertise. When the @clear_func you provided is called, you
    simply free the data blob. The latter is more useful when the
    contents of clipboard reflect the internal state of a @GObject
    (As an example, for the PRIMARY clipboard, when an entry widget
    provides the clipboard's contents the contents are simply the
    text within the selected region.) If the contents change, the
    entry widget can call gtk_clipboard_set_with_owner() to update
    the timestamp for clipboard ownership, without having to worry
    about @clear_func being called.
  </para>
  <para>
    Requesting the data from the clipboard is essentially
    asynchronous. If the contents of the clipboard are provided within
    the same process, then a direct function call will be made to
    retrieve the data, but if they are provided by another process,
    then the data needs to be retrieved from the other process, which
    may take some time. To avoid blocking the user interface, the call
    to request the selection, gtk_clipboard_request_contents() takes a
    callback that will be called when the contents are received (or
    when the request fails.) If you don't want to deal with providing
    a separate callback, you can also use gtk_clipboard_wait_for_contents().
    What this does is run the Glib main loop recursively waiting for
    the contents. This can simplify the code flow, but you still have
    to be aware that other callbacks in your program can be called
    while this recursive mainloop is running.
  </para>
  <para>
    Along with the functions to get the clipboard contents as an
    arbitrary data chunk, there are also functions to retrieve
    it as text, gtk_clipboard_request_text() and
    gtk_clipboard_wait_for_text(). These functions take care of
    determining which formats are advertised by the clipboard
    provider, asking for the clipboard in the best available format
    and converting the results into the UTF-8 encoding. (The standard
    form for representing strings in GTK+.)
  </para>


<!-- ##### SECTION ./tmpl/gtkdebug.sgml:See_Also ##### -->
<para>

</para>


<!-- ##### MACRO GTK_CONTAINER_RESIZE_PENDING ##### -->
<para>

</para>

@obj: 

<!-- ##### FUNCTION gtk_menu_factory_remove_entries ##### -->
<para>

</para>

@factory: 
@entries: 
@nentries: 

<!-- ##### FUNCTION gtk_text_buffer_find_string ##### -->
<para>

</para>

@buffer: 
@iter: 
@str: 
@start: 
@end: 
@Returns: 

<!-- ##### FUNCTION gtk_marshal_NONE__INT_POINTER_INT_INT_INT_POINTER ##### -->
<para>

</para>

@object: 
@func: 
@func_data: 
@args: 

<!-- ##### FUNCTION gtk_marshal_INT__INT ##### -->
<para>

</para>

@object: 
@func: 
@func_data: 
@args: 

<!-- ##### FUNCTION gtk_marshal_NONE__INT_FLOAT_BOOL ##### -->
<para>

</para>

@object: 
@func: 
@func_data: 
@args: 

<!-- ##### FUNCTION gtk_paned_compute_position ##### -->
<para>
Internal function used by #GtkHPaned and #GtkVPaned
</para>

@paned: 
@allocation: 
@child1_req: 
@child2_req: 

<!-- ##### MACRO gtk_marshal_NONE__POINTER_STRING_STRING ##### -->
<para>

</para>


<!-- ##### FUNCTION gtk_trace_referencing ##### -->
<para>
Private: print debugging information while doing a gtk_object_ref() or 
a gtk_object_unref().
</para>

@object: object to reference or unreference.
@func: name of caller's function to print (used within macros).
@dummy: unused.
@line: line number (used within macros).
@do_ref: whether to reference or unreference.

<!-- ##### MACRO GTK_VALUE_CALLBACK ##### -->
<para>
Use to get the value of a GtkArg whose GtkType is GTK_TYPE_CALLBACK
</para>

@a: 

<!-- ##### MACRO gtk_marshal_NONE__ENUM_FLOAT_BOOL ##### -->
<para>

</para>


<!-- ##### ENUM GtkFontType ##### -->
<para>
A set of bit flags used to specify the type of fonts shown
when calling gtk_font_selection_dialog_set_filter() or
gtk_font_selection_set_filter().
</para>

@GTK_FONT_BITMAP: bitmap fonts.
@GTK_FONT_SCALABLE: scalable fonts.
@GTK_FONT_SCALABLE_BITMAP: scaled bitmap fonts.
@GTK_FONT_ALL: a bitwise combination of all of the above.

<!-- ##### MACRO GTK_TYPE_STRUCTURED_LAST ##### -->
<para>
The last structured enumerated type value.
</para>


<!-- ##### MACRO GTK_OBJECT_NSIGNALS ##### -->
<para>
Get the number of signals defined by this object.
</para>

@obj: the object to query.

<!-- ##### FUNCTION gtk_menu_factory_remove_subfactory ##### -->
<para>

</para>

@factory: 
@subfactory: 
@path: 

<!-- ##### SECTION ./tmpl/gtkclipboard.sgml:Short_Description ##### -->
Storing data on Clipboards.


<!-- ##### FUNCTION gtk_type_children_types ##### -->
<para>
Return the pointer to the type's children's types.
</para>

@type: GtkType
@Returns: pointer to a GList

<!-- ##### FUNCTION gtk_type_register_flags ##### -->
<para>
Register a new set of flags @values and give them the name in
@type_name.
</para>

@type_name: must not be null.
@values: GtkFlagValue*
@Returns: 

<!-- ##### FUNCTION gtk_selection_clear_targets ##### -->
<para>

</para>

@widget: 
@selection: 

<!-- ##### SIGNAL GtkTextView::scroll-text ##### -->
<para>

</para>

@textview: the object which received the signal.
@arg1: 

<!-- ##### ENUM GtkPrivateFlags ##### -->
<para>

</para>

@PRIVATE_GTK_USER_STYLE: 
@PRIVATE_GTK_RESIZE_PENDING: 
@PRIVATE_GTK_RESIZE_NEEDED: 
@PRIVATE_GTK_LEAVE_PENDING: 
@PRIVATE_GTK_HAS_SHAPE_MASK: 
@PRIVATE_GTK_IN_REPARENT: 
@PRIVATE_GTK_DIRECTION_SET: 
@PRIVATE_GTK_DIRECTION_LTR: 

<!-- ##### FUNCTION gtk_type_set_chunk_alloc ##### -->
<para>
Set the mem_chunk size so it will hold @n_chunks of the objects of that @type.
</para>

@type: There must be an unlocked TypeNode associated with this type otherwise nothing happens.
@n_chunks: 

<!-- ##### MACRO GTK_TYPE_STRUCTURED_FIRST ##### -->
<para>
The first structured enumerated type value.
</para>


<!-- ##### FUNCTION gtk_type_describe_tree ##### -->
<para>
Given a @type, describe all of its children, and their children.  Only
show the size if @show_size is true.
</para>

@type: GtkType
@show_size: gboolean

<!-- ##### FUNCTION gtk_clipboard_request_contents ##### -->
<para>

</para>

@clipboard: 
@target: 
@callback: 
@user_data: 

<!-- ##### FUNCTION gtk_marshal_BOOL__POINTER_INT_INT_INT ##### -->
<para>

</para>

@object: 
@func: 
@func_data: 
@args: 

<!-- ##### FUNCTION gtk_clipboard_get_owner ##### -->
<para>

</para>

@clipboard: 
@Returns: 

<!-- ##### SECTION ./tmpl/gtkdebug.sgml:Long_Description ##### -->
<para>

</para>


<!-- ##### FUNCTION gtk_window_remove_embedded_xid ##### -->
<para>

</para>

@window: 
@xid: 

<!-- ##### FUNCTION gtk_marshal_NONE__INT_FLOAT ##### -->
<para>

</para>

@object: 
@func: 
@func_data: 
@args: 

<!-- ##### FUNCTION gtk_text_iter_get_pixmap ##### -->
<para>

</para>

@iter: 
@pixmap: 
@mask: 
@Returns: 

<!-- ##### MACRO gtk_marshal_NONE__POINTER_UINT_UINT ##### -->
<para>

</para>


<!-- ##### FUNCTION gtk_font_selection_dialog_set_filter ##### -->
<para>
Sets one of the two font filters, to limit the fonts shown.
</para>

@fsd: a #GtkFontSelectionDialog.
@filter_type: which of the two font filters to set, either
#GTK_FONT_FILTER_BASE or #GTK_FONT_FILTER_USER. The user filter
can be changed by the user, but the base filter is permanent.
@font_type: the types of font to be shown. This is a bitwise combination of
#GTK_FONT_BITMAP, #GTK_FONT_SCALABLE and #GTK_FONT_SCALABLE_BITMAP,
or #GTK_FONT_ALL to show all three font types.
@foundries: a NULL-terminated array of strings containing foundry names which
will be shown, or NULL to show all foundries.
@weights: a NULL-terminated array of strings containing weight names which
will be shown, or NULL to show all weights.
@slants: a NULL-terminated array of strings containing slant names which
will be shown, or NULL to show all slants.
@setwidths: a NULL-terminated array of strings containing setwidth names which
will be shown, or NULL to show all setwidths.
@spacings: a NULL-terminated array of strings containing spacings which
will be shown, or NULL to show all spacings.
@charsets: a NULL-terminated array of strings containing charset names which
will be shown, or NULL to show all charsets.

<!-- ##### SECTION ./tmpl/gtkclipboard.sgml:Title ##### -->
Clipboards


<!-- ##### SIGNAL GtkTextView::delete-text ##### -->
<para>

</para>

@textview: the object which received the signal.
@arg1: 
@arg2: 

<!-- ##### FUNCTION gtk_container_get_toplevels ##### -->
<para>

</para>

@Returns: 

<!-- ##### MACRO GTK_TYPE_NUM_BUILTINS ##### -->
<para>
No idea.
</para>


<!-- ##### MACRO GTK_TYPE_MAKE ##### -->
<para>
Combine a fundemantal type and a sequence number to create a gtk type.
</para>

@parent_t: 
@seqno: 

<!-- ##### MACRO GTK_TYPE_FLAT_LAST ##### -->
<para>
The last "flat" (no struct) enumerated type value.
</para>


<!-- ##### FUNCTION gtk_marshal_NONE__POINTER ##### -->
<para>

</para>

@object: 
@func: 
@func_data: 
@args: 

<!-- ##### FUNCTION gtk_marshal_NONE__POINTER_INT_POINTER ##### -->
<para>

</para>

@object: 
@func: 
@func_data: 
@args: 

<!-- ##### FUNCTION gtk_text_iter_in_region ##### -->
<para>

</para>

@iter: 
@start: 
@end: 
@Returns: 

<!-- ##### FUNCTION gtk_type_get_varargs_type ##### -->
<para>
Get the varargs type associated with @foreign_type
</para>

@foreign_type: GtkType
@Returns: GtkType

<!-- ##### FUNCTION gtk_clipboard_wait_for_text ##### -->
<para>

</para>

@clipboard: 
@Returns: <!--
Local variables:
mode: sgml
sgml-parent-document: ("../gtk-docs.sgml" "book" "refsect2" "")
End:
-->

<!-- ##### STRUCT GtkMenuFactory ##### -->
<para>

</para>

@path: 
@type: 
@accel_group: 
@widget: 
@subfactories: 

<!-- ##### MACRO GTK_VALUE_FOREIGN ##### -->
<para>
Use to get the value of a GtkArg whose GtkType is GTK_TYPE_C_FOREIGN
</para>

@a: 

<!-- ##### SIGNAL GtkTextView::paste-text ##### -->
<para>

</para>

@textview: the object which received the signal.

<!-- ##### MACRO GTK_PRIVATE_SET_FLAG ##### -->
<para>

</para>

@wid: 
@flag: 

<!-- ##### FUNCTION gtk_ruler_draw_pos ##### -->
<para>

</para>

@ruler: the gtkruler

<!-- ##### MACRO GTK_WIDGET_USER_STYLE ##### -->
<para>

</para>

@obj: 

<!-- ##### ENUM GtkDebugFlag ##### -->
<para>

</para>

@GTK_DEBUG_OBJECTS: 
@GTK_DEBUG_MISC: 
@GTK_DEBUG_SIGNALS: 
@GTK_DEBUG_DND: 
@GTK_DEBUG_PLUGSOCKET: 

<!-- ##### FUNCTION gtk_clipboard_set_with_owner ##### -->
<para>

</para>

@clipboard: 
@targets: 
@n_targets: 
@get_func: 
@clear_func: 
@owner: 
@Returns: 

<!-- ##### FUNCTION gtk_menu_factory_remove_paths ##### -->
<para>

</para>

@factory: 
@paths: 
@npaths: 

<!-- ##### FUNCTION gtk_type_query ##### -->
<para>
Given a type, return various interesting parameters of the type.
</para>

@type: GtkType
@Returns: GtkTypeQuery*

<!-- ##### SECTION ./tmpl/gtkprivate.sgml:Long_Description ##### -->
<para>

</para>


<!-- ##### MACRO GTK_TYPE_IDENTIFIER ##### -->
<para>
Hide the name of gtk_identifier_get_type
</para>


<!-- ##### FUNCTION gtk_marshal_NONE__INT_POINTER_INT_INT_INT ##### -->
<para>

</para>

@object: 
@func: 
@func_data: 
@args: 

<!-- ##### MACRO gtk_marshal_NONE__ENUM ##### -->
<para>

</para>


<!-- ##### MACRO GTK_PRIVATE_FLAGS ##### -->
<para>

</para>

@wid: 

<!-- ##### FUNCTION gtk_selection_data_get_text ##### -->
<para>

</para>

@selection_data: 
@Returns: 

<!-- ##### FUNCTION gtk_marshal_BOOL__NONE ##### -->
<para>

</para>

@object: 
@func: 
@func_data: 
@args: 

<!-- ##### FUNCTION gtk_type_free ##### -->
<para>
Given the type of an object and a pointer to it, the object is freed.
</para>

@type: GtkType
@mem: gpointer to the object

<!-- ##### SECTION ./tmpl/gtkimcontextsimple.sgml:Short_Description ##### -->



<!-- ##### FUNCTION gtk_marshal_NONE__POINTER_POINTER_POINTER ##### -->
<para>

</para>

@object: 
@func: 
@func_data: 
@args: 

<!-- ##### STRUCT GtkMenuPath ##### -->
<para>

</para>

@path: 
@widget: 

<!-- ##### MACRO gtk_marshal_NONE__POINTER_UINT ##### -->
<para>

</para>


<!-- ##### SECTION ./tmpl/gtkprivate.sgml:Title ##### -->
Private Information


<!-- ##### FUNCTION gtk_menu_factory_find ##### -->
<para>

</para>

@factory: 
@path: 
@Returns: 

<!-- ##### STRUCT GtkMenuEntry ##### -->
<para>

</para>

@path: 
@accelerator: 
@callback: 
@callback_data: 
@widget: 

<!-- ##### FUNCTION gtk_window_add_embedded_xid ##### -->
<para>

</para>

@window: 
@xid: 

<!-- ##### FUNCTION gtk_marshal_NONE__BOOL ##### -->
<para>

</para>

@object: 
@func: 
@func_data: 
@args: 

<!-- ##### FUNCTION gtk_color_selection_set_opacity ##### -->
<para>
Controls whether opacity can be set with the #GtkColorSelection.
If this functionality is enabled, the necessary additional widgets
are added to the #GtkColorSelection and the opacity value can be
retrieved via the fourth value in the color array returned by
the gtk_color_selection_get_color() function.
</para>

@colorsel: a #GtkColorSelection.
@use_opacity: a boolean indicating whether the opacity selection
is enabled.

<!-- ##### FUNCTION gtk_marshal_INT__POINTER ##### -->
<para>

</para>

@object: 
@func: 
@func_data: 
@args: 

<!-- ##### MACRO GTK_WIDGET_RESIZE_NEEDED ##### -->
<para>

</para>

@obj: 

<!-- ##### MACRO GTK_NOTE ##### -->
<para>

</para>

@type: 
@action: 

<!-- ##### ENUM GtkTextViewDeleteType ##### -->
<para>

</para>

@GTK_TEXT_DELETE_CHAR: 
@GTK_TEXT_DELETE_HALF_WORD: 
@GTK_TEXT_DELETE_WHOLE_WORD: 
@GTK_TEXT_DELETE_HALF_WRAPPED_LINE: 
@GTK_TEXT_DELETE_WHOLE_WRAPPED_LINE: 
@GTK_TEXT_DELETE_HALF_LINE: 
@GTK_TEXT_DELETE_WHOLE_LINE: 
@GTK_TEXT_DELETE_WHITESPACE: 
@GTK_TEXT_DELETE_WHITESPACE_LEAVE_ONE: 

<!-- ##### MACRO GTK_TYPE_FLAT_FIRST ##### -->
<para>
The first "flat" (no struct) enumerated type value.
</para>


<!-- ##### FUNCTION gtk_menu_factory_new ##### -->
<para>

</para>

@type: 
@Returns: 

<!-- ##### MACRO gtk_marshal_NONE__UINT_POINTER_UINT_UINT_ENUM ##### -->
<para>

</para>


<!-- ##### FUNCTION gtk_text_buffer_spew ##### -->
<para>

</para>

@buffer: 

<!-- ##### STRUCT GtkTextTabArray ##### -->
<para>

</para>


<!-- ##### ARG GtkTextTag:overstrike ##### -->
<para>

</para>


<!-- ##### USER_FUNCTION GtkClipboardTextReceivedFunc ##### -->
<para>
    A function to be called when the results of gtk_clipboard_request_text()
    are received, or when the request fails.
</para>

@clipboard: the #GtkClipboard
@text: the text received, as a UTF-8 encoded string, or %NULL
            if retrieving the data failed.
@data: the @user_data supplied to gtk_clipboard_request_text().

<!-- ##### MACRO GTK_WIDGET_HAS_SHAPE_MASK ##### -->
<para>

</para>

@obj: 

<!-- ##### FUNCTION gtk_text_buffer_copy ##### -->
<para>

</para>

@buffer: 
@time: 

<!-- ##### FUNCTION gtk_marshal_NONE__POINTER_INT ##### -->
<para>

</para>

@object: 
@func: 
@func_data: 
@args: 

<!-- ##### MACRO GTK_OBJECT_SIGNALS ##### -->
<para>
Get the array of signals defined for this object.
</para>

@obj: the object to fetch the signals from.

<!-- ##### SECTION ./tmpl/gtkenums.sgml.sgml:Title ##### -->
gtkenums.sgml


<!-- ##### FUNCTION gtk_marshal_NONE__INT_INT_POINTER ##### -->
<para>

</para>

@object: 
@func: 
@func_data: 
@args: 

<!-- ##### FUNCTION gtk_type_check_object_cast ##### -->
<para>
Given a pointer to a GtkTypeObject @type_object, and a GtkType @cast_type,
make sure that it's okay to cast @type_object into a @cast_type.
</para>

@type_object: GtkTypeObject*
@cast_type: GtkType
@Returns: the same GtkTypeObject* as @type_object

<!-- ##### USER_FUNCTION GtkMenuCallback ##### -->
<para>

</para>

@widget: 
@user_data: 

<!-- ##### FUNCTION gtk_themes_exit ##### -->
<para>

</para>

@error_code: 

<!-- ##### FUNCTION gtk_marshal_BOOL__POINTER_POINTER_POINTER_POINTER ##### -->
<para>

</para>

@object: 
@func: 
@func_data: 
@args: 

<!-- ##### USER_FUNCTION GtkClipboardGetFunc ##### -->
<para>
A function that will be called to provide the contents of the selection.
If multiple types of data were advertised, the requested type can
be determined from the @info parameter or by checking the target field
of @selection_data. If the data could succesfully be converted into
then it should be stored into the @selection_data object by
calling gtk_selection_data_set() (or related functions such
as gtk_seletion_data_get().) If no data is set, the requestor
will be informed that the attempt to get the data failed.    
</para>

@clipboard: the #GtkClipboard
@selection_data: a #GtkSelectionData argument in which the requested
                     data should be stored.
@info: the info field corresponding to the requested
                     target from the #GtkTargetEntry array passed to
                     gtk_clipboard_set_with_data() or gtk_clipboard_set_with_owner().
@user_data_or_owner: the @user_data argument passed to gtk_clipboard_set_with_data(), or
                     the @owner argument passed to gtk_clipboard_set_owner()

<!-- ##### MACRO gtk_marshal_NONE__OBJECT ##### -->
<para>

</para>


<!-- ##### SECTION ./tmpl/gtkmenufactory.sgml:Long_Description ##### -->
<para>

</para>


<!-- ##### FUNCTION gtk_clipboard_set_text ##### -->
<para>

</para>

@clipboard: 
@text: 
@len: 

<!-- ##### FUNCTION gtk_type_set_varargs_type ##### -->
<para>
Set the varargs type for a fundamental type @foreign_type.
</para>

@foreign_type: Must be a GtkType with a sequence number of zero.  Must not be a
fundamental type.
@varargs_type: Must be a GtkType which is either structured or flag, or NONE.

<!-- ##### STRUCT GtkClipboard ##### -->
<para>

</para>


<!-- ##### FUNCTION gtk_type_check_class_cast ##### -->
<para>
Given a GtkTypeClass pointer @klass, and a GtkType @cast_type, make
sure that it's okay to cast something of that @klass into a @cast_type.
</para>

@klass: GtkTypeClass*
@cast_type: GtkType
@Returns: Always return @klass.

<!-- ##### FUNCTION gtk_menu_factory_destroy ##### -->
<para>

</para>

@factory: 

<!-- ##### FUNCTION gtk_text_buffer_insert_pixmap ##### -->
<para>

</para>

@buffer: 
@iter: 
@pixmap: 
@mask: 

<!-- ##### FUNCTION gtk_marshal_NONE__C_CALLBACK_C_CALLBACK ##### -->
<para>

</para>

@object: 
@func: 
@func_data: 
@args: 

<!-- ##### FUNCTION gtk_marshal_NONE__POINTER_INT_INT_POINTER_INT_INT ##### -->
<para>

</para>

@object: 
@func: 
@func_data: 
@args: 

<!-- ##### MACRO GTK_VALUE_ARGS ##### -->
<para>
Use to get the value of a GtkArg whose GtkType is GTK_TYPE_ARGS
</para>

@a: 

<!-- ##### FUNCTION gtk_menu_factory_add_entries ##### -->
<para>

</para>

@factory: 
@entries: 
@nentries: 

<!-- ##### FUNCTION gtk_im_context_simple_new ##### -->
<para>

</para>

@Returns: 

<!-- ##### FUNCTION gtk_type_describe_heritage ##### -->
<para>
Print the types @type inherits from.
</para>

@type: GtkType

<!-- ##### FUNCTION gtk_text_buffer_set_clipboard_contents ##### -->
<para>

</para>

@buffer: 
@text: 

<!-- ##### ENUM GtkFontFilterType ##### -->
<para>
A set of bit flags used to specify the filter being set
when calling gtk_font_selection_dialog_set_filter() or
gtk_font_selection_set_filter().
</para>

@GTK_FONT_FILTER_BASE: the base filter, which can't be changed by the user.
@GTK_FONT_FILTER_USER: the user filter, which can be changed from within the
'Filter' page of the #GtkFontSelection widget.

<!-- ##### FUNCTION gtk_type_parent_class ##### -->
<para>
Return the class of the parent.  Initialize the class if necessary.
Return NULL if anything goes wrong.
</para>

@type: GtkType
@Returns: gpointer to the klass.

<!-- ##### FUNCTION gtk_window_set_default ##### -->
<para>

</para>

@window: 
@defaultw: 

<!-- ##### FUNCTION gtk_clipboard_request_text ##### -->
<para>

</para>

@clipboard: 
@callback: 
@user_data: 

<!-- ##### FUNCTION gtk_marshal_NONE__INT ##### -->
<para>

</para>

@object: 
@func: 
@func_data: 
@args: 

<!-- ##### MACRO GTK_WIDGET_LEAVE_PENDING ##### -->
<para>

</para>

@obj: 

<!-- ##### MACRO gtk_marshal_NONE__UINT ##### -->
<para>

</para>


<!-- ##### FUNCTION gtk_accel_group_marshal_add ##### -->
<para>

</para>

@object: 
@func: 
@func_data: 
@args: 

<!-- ##### MACRO GTK_WIDGET_IN_REPARENT ##### -->
<para>

</para>

@obj: 

<!-- ##### FUNCTION gtk_marshal_INT__POINTER_CHAR_CHAR ##### -->
<para>

</para>

@object: 
@func: 
@func_data: 
@args: 

<!-- ##### FUNCTION gtk_marshal_NONE__POINTER_INT_INT ##### -->
<para>

</para>

@object: 
@func: 
@func_data: 
@args: 

<!-- ##### FUNCTION gtk_accel_group_marshal_remove ##### -->
<para>

</para>

@object: 
@func: 
@func_data: 
@args: 

<!-- ##### MACRO gtk_marshal_NONE__STRING_INT_POINTER ##### -->
<para>

</para>


<!-- ##### FUNCTION gtk_marshal_NONE__INT_POINTER ##### -->
<para>

</para>

@object: 
@func: 
@func_data: 
@args: 

<!-- ##### FUNCTION gtk_rc_init ##### -->
<para>
Internal function.
</para>


<!-- ##### SECTION ./tmpl/gtkenums.sgml.sgml:See_Also ##### -->
<para>

</para>


<!-- ##### FUNCTION gtk_container_register_toplevel ##### -->
<para>

</para>

@container: 

<!-- ##### MACRO gtk_marshal_ENUM__ENUM ##### -->
<para>

</para>


<!-- ##### MACRO gtk_widget_push_visual ##### -->
<para>

</para>

@v: 
@visual: 

<!-- ##### SECTION ./tmpl/gtkimcontextsimple.sgml:Title ##### -->
GtkIMContextSimple


<!-- ##### MACRO gtk_marshal_NONE__POINTER_INT_INT_POINTER_UINT_UINT ##### -->
<para>

</para>


<!-- ##### MACRO GTK_VALUE_C_CALLBACK ##### -->
<para>
Use to get the value of a GtkArg whose GtkType is GTK_TYPE_C_CALLBACK
</para>

@a: 

<!-- ##### FUNCTION gtk_marshal_BOOL__POINTER_POINTER_INT_INT ##### -->
<para>

</para>

@object: 
@func: 
@func_data: 
@args: 

<!-- ##### SIGNAL GtkTextView::move-insert ##### -->
<para>

</para>

@textview: the object which received the signal.
@arg1: 
@arg2: 
@arg3: 

<!-- ##### SECTION ./tmpl/gtkimcontextsimple.sgml:Long_Description ##### -->
<para>

</para>


<!-- ##### FUNCTION gtk_text_buffer_find_regexp ##### -->
<para>

</para>

@buffer: 
@regexp: 
@start: 
@end: 
@Returns: 

<!-- ##### FUNCTION gtk_menu_factory_add_subfactory ##### -->
<para>

</para>

@factory: 
@subfactory: 
@path: 

<!-- ##### ENUM GtkTextViewScrollType ##### -->
<para>

</para>

@GTK_TEXT_SCROLL_TO_TOP: 
@GTK_TEXT_SCROLL_TO_BOTTOM: 
@GTK_TEXT_SCROLL_PAGE_DOWN: 
@GTK_TEXT_SCROLL_PAGE_UP: 

