<!-- ##### SECTION Title ##### -->
GdkPixbufLoader

<!-- ##### SECTION Short_Description ##### -->
Application-driven progressive image loading.

<!-- ##### SECTION Long_Description ##### -->
  <para>
    #GdkPixbufLoader provides a way for applications to drive the
    process of loading an image, by letting them send the image data
    directly to the loader instead of having the loader read the data
    from a file.  Applications can use this functionality instead of
    gdk_pixbuf_new_from_file() when they need to parse image data in
    small chunks.  For example, it should be used when reading an
    image from a (potentially) slow network connection, or when
    loading an extremely large file.
  </para>

  <para>
    To use #GdkPixbufLoader to load an image, just create a new one,
    and call gdk_pixbuf_loader_write() to send the data to it.  When
    done, gdk_pixbuf_loader_close() should be called to end the stream
    and finalize everything.  The loader will emit two important
    signals throughout the process.  The first, "<link
    linkend="GdkPixbufLoader-area-prepared">area_prepared</link>",
    will be called as soon as the image has enough information to
    determine the size of the image to be used.  It will pass a
    @GdkPixbuf in.  If you want to use it, you can simply ref it.  In
    addition, no actual information will be passed in yet, so the
    pixbuf can be safely filled with any temporary graphics (or an
    initial color) as needed.  You can also call the
    gdk_pixbuf_loader_get_pixbuf() once this signal has been emitted
    and get the same pixbuf.
  </para>

  <para>
    The other signal, "<link
    linkend="GdkPixbufLoader-area-updated">area_updated</link>" gets
    called every time a region is updated.  This way you can update a
    partially completed image.  Note that you do not know anything
    about the completeness of an image from the area updated.  For
    example, in an interlaced image, you need to make several passes
    before the image is done loading.
  </para>

  <refsect2>
    <title>Loading an animation</title>

    <para>
      Loading an animation is a little more complex then loading an
      image.  In addition to the above signals, there is also a "<link
      linkend="GdkPixbufLoader-frame-done">frame_done</link>" signal,
      as well as an "<link
      linkend="GdkPixbufLoader-animation-done">animation_done</link>"
      signal.  The first lets the application know that it is dealing
      with an animation, instead of a static image.  It also passes a
      #GdkPixbufFrame in the signal.  As before, if you want to keep
      the frame, you need to ref it.  Once the first "<link
      linkend="GdkPixbufLoader-frame-done">frame_done</link>" signal
      has been emitted, you can call gdk_pixbuf_loader_get_animation()
      to get the #GdkPixbufAnimation struct.  Each subsequent frame
      goes through a similar lifecycle.  For example "<link
      linkend="GdkPixbufLoader-area-prepared">area_prepared</link>" is
      re-emitted.  Then "<link
      linkend="GdkPixbufLoader-area-updated">area_updated</link>" is
      emitted as many times as necessary.  Finally, "<link
      linkend="GdkPixbufLoader-animation-done">animation_done</link>"
      is emitted as soon as all frames are done.
    </para>
  </refsect2>

<!-- ##### SECTION See_Also ##### -->
  <para>
    gdk_pixbuf_new_from_file()
  </para>

<!-- ##### MACRO GDK_PIXBUF_LOADER ##### -->
  <para>
    Casts a #GtkObject to a #GdkPixbufLoader.
  </para>

@obj: A GTK+ object.


<!-- ##### FUNCTION gdk_pixbuf_loader_new ##### -->
<para>

</para>

@Returns: 


<!-- ##### FUNCTION gdk_pixbuf_loader_write ##### -->
<para>

</para>

@loader: 
@buf: 
@count: 
@Returns: 


<!-- ##### FUNCTION gdk_pixbuf_loader_get_pixbuf ##### -->
<para>

</para>

@loader: 
@Returns: 


<!-- ##### FUNCTION gdk_pixbuf_loader_get_animation ##### -->
<para>

</para>

@loader: 
@Returns: 


<!-- ##### FUNCTION gdk_pixbuf_loader_close ##### -->
<para>

</para>

@loader: 


<!-- ##### SIGNAL GdkPixbufLoader::area-updated ##### -->
  <para>
    This signal is emitted when a significant area of the image being
    loaded has been updated.  Normally it means that a complete
    scanline has been read in, but it could be a different area as
    well.  Applications can use this signal to know when to repaint
    areas of an image that is being loaded.
  </para>

@loader: Loader which emitted the signal.
@x: X offset of upper-left corner of the updated area.
@y: Y offset of upper-left corner of the updated area.
@width: Width of updated area.
@height: Height of updated area.

<!-- ##### SIGNAL GdkPixbufLoader::area-prepared ##### -->
  <para>
    This signal is emitted when the pixbuf loader has been fed the
    initial amount of data that is required to figure out the size and
    format of the image that it will create.  After this signal is
    emitted, applications can call gdk_pixbuf_loader_get_pixbuf() to
    fetch the partially-loaded pixbuf.
  </para>

@loader: Loader which emitted the signal.

<!-- ##### SIGNAL GdkPixbufLoader::frame-done ##### -->
  <para>
    This signal is emitted when a frame is done loading.  It will be
    emitted for each frame in an animation data stream.
  </para>

@loader: Loader which emitted the signal.
@frame: Frame which just completed loading.

<!-- ##### SIGNAL GdkPixbufLoader::animation-done ##### -->
  <para>
    This signal is emitted when an animation is done loading.
  </para>

@loader: Loader which emitted the signal.

<!-- ##### SIGNAL GdkPixbufLoader::closed ##### -->
  <para>
    This signal is emitted when gdk_pixbuf_loader_close() is called.
    It can be used by different parts of an application to receive
    notification when an image loader is closed by the code that
    drives it.
  </para>

@loader: Loader which emitted the signal.

<!--
Local variables:
mode: sgml
sgml-parent-document: ("../gdk-pixbuf.sgml" "book" "refsect2" "")
End:
-->

