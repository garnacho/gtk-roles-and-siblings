# Process this file with autoconf to produce a configure script.
AC_INIT(gdk/gdktypes.h)

# Configure glib
AC_CONFIG_SUBDIRS(glib)

dnl Initialize automake stuff
AM_INIT_AUTOMAKE(gtk+, 971109)

# Specify a configuration file
AM_CONFIG_HEADER(config.h)

dnl Initialize libtool
AM_PROG_LIBTOOL

dnl Initialize maintainer mode
AM_MAINTAINER_MODE

AC_CANONICAL_HOST

AC_ARG_ENABLE(shm, [  --enable-shm            support shared memory if available [default=yes]],
		   echo $enable_shm, enable_shm="yes")
AC_ARG_ENABLE(debug, [  --enable-debug          turn on debugging [default=no]],
if eval "test x$enable_debug = xyes"; then
  DEBUGFLAG="-g"
fi)
AC_ARG_ENABLE(ansi, [  --enable-ansi           turn on strict ansi [default=no]],
		    , enable_ansi=no)

AC_ARG_WITH(xinput, [  --with-xinput[=no/gxi/xfree] support XInput ])

if test -n "$DEBUGFLAG"; then
  CFLAGS="$DEBUGFLAG"
else
  CFLAGS="$CFLAGS -DNDEBUG"
fi

# Build time sanity check...
AM_SANITY_CHECK

# Checks for programs.
AC_PROG_CC
AM_PROG_CC_STDC
AC_PROG_INSTALL
AC_PROG_MAKE_SET

if eval "test x$GCC = xyes"; then
  test `echo "$CFLAGS" | grep "\-Wall" > /dev/null 2> /dev/null`
  if test ! $?; then
    CFLAGS="$CFLAGS -Wall"
  fi

  if eval "test x$enable_ansi = xyes"; then
    test `echo "$CFLAGS" | grep "\-ansi" > /dev/null 2> /dev/null`
    if test ! $?; then
      CFLAGS="$CFLAGS -ansi"
    fi

    test `echo "$CFLAGS" | grep "\-pedantic" > /dev/null 2> /dev/null`
    if test ! $?; then
      CFLAGS="$CFLAGS -pedantic"
    fi
  fi
fi

# Find the X11 include and library directories
AC_PATH_X
AC_PATH_XTRA

if test "x$x_includes" = "x"; then
  x_includes="/usr/include"
fi

saved_cflags="$CFLAGS"
saved_ldflags="$LDFLAGS"

CFLAGS="$X_CFLAGS"
LDFLAGS="$X_LDFLAGS $X_LIBS"

# Checks for libraries.
# Check for the X11 library
AC_CHECK_LIB(X11, XOpenDisplay, x_libs="-lX11 $X_EXTRA_LIBS", no_x11_lib=yes, $X_EXTRA_LIBS)

if eval "test x$enable_shm = xyes"; then
  # Check for the Xext library (needed for XShm extention)
  AC_CHECK_LIB(Xext, XShmAttach, x_libs="-lXext $x_libs", no_xext_lib=yes, $x_libs)
fi

x_cflags="$X_CFLAGS"
x_ldflags="$X_LDFLAGS $X_LIBS"

# set up things for XInput

if eval "test x$with_xinput = xgxi -o x$with_xinput = xyes"; then
  AC_DEFINE(XINPUT_GXI)
  xinput_progs=gxid
  x_libs="-lXi $x_libs"
elif eval "test x$with_xinput = xxfree"; then
  AC_DEFINE(XINPUT_XFREE)
  x_libs="-lXi $x_libs"
else
  AC_DEFINE(XINPUT_NONE)
fi


AC_SUBST(x_cflags)
AC_SUBST(x_includes)
AC_SUBST(x_ldflags)
AC_SUBST(x_libs)
AC_SUBST(xinput_progs)

CFLAGS="$saved_cflags"
LDFLAGS="$saved_ldflags"

if eval "test x$enable_shm = xyes"; then
  # Check for shared memory
  AC_CHECK_HEADER(sys/ipc.h, AC_DEFINE(HAVE_IPC_H), no_sys_ipc=yes)
  AC_CHECK_HEADER(sys/shm.h, AC_DEFINE(HAVE_SHM_H), no_sys_shm=yes)

  # Check whether shmctl IPC_RMID allowes subsequent attaches
  if test "$ac_cv_header_sys_shm_h" = "yes"; then
    AC_MSG_CHECKING(whether shmctl IPC_RMID allowes subsequent attaches)
    AC_TRY_RUN([
          #include <sys/types.h>
          #include <sys/ipc.h>
          #include <sys/shm.h>
          int main()
          {
            int id;
            char *shmaddr;
          id = shmget (IPC_PRIVATE, 4, IPC_CREAT | 0777);
          if (id == -1)
            exit (2);
            shmaddr = shmat (id, 0, 0);
            shmctl (id, IPC_RMID, 0);
            if ((char*) shmat (id, 0, 0) == (char*) -1)
            {
              shmdt (shmaddr);
              exit (1);
            }
            shmdt (shmaddr);
            shmdt (shmaddr);
            exit (0);
          }
      ],
      AC_DEFINE(IPC_RMID_DEFERRED_RELEASE)
        AC_MSG_RESULT(yes),
      AC_MSG_RESULT(no),
      AC_MSG_RESULT(assuming no))
  fi

  # Check for the X shared memory extension header file
  AC_MSG_CHECKING(X11/extensions/XShm.h)
  if eval "test x$no_ext_lib = xyes"; then
    AC_MSG_RESULT(no)
    no_xshm=yes
  else
    if eval "test -f $x_includes/X11/extensions/XShm.h"; then
      AC_MSG_RESULT(yes)
      AC_DEFINE(HAVE_XSHM_H)
    else
      AC_MSG_RESULT(no)
      no_xshm=yes
    fi
  fi
fi

# Check for private display resource base variable
AC_MSG_CHECKING(resource base field in XDisplay)
AC_CACHE_VAL(gtk_cv_display_resource_base,
[AC_TRY_RUN([
#define XLIB_ILLEGAL_ACCESS
#include <X11/Xlib.h>

int
main ()
{
  Display *display;

  return 0;

  display->resource_base;
}],
gtk_cv_display_resource_base="resource_base",
gtk_cv_display_resource_base="private3")])
AC_MSG_RESULT($gtk_cv_display_resource_base)
AC_DEFINE_UNQUOTED(RESOURCE_BASE, gdk_display->$gtk_cv_display_resource_base)

# Checks for header files.
AC_HEADER_STDC

# Checks for typedefs, structures, and compiler characteristics.
AC_C_CONST

# Checks for library functions.
AC_TYPE_SIGNAL

# Check for sys/select.h

AC_MSG_CHECKING([fd_set and sys/select])
AC_TRY_COMPILE([#include <sys/types.h>],
        [fd_set readMask, writeMask;], gtk_ok=yes, gtk_ok=no)
if test $gtk_ok = no; then
    AC_HEADER_EGREP(fd_mask, sys/select.h, gtk_ok=yes)
    if test $gtk_ok = yes; then
        AC_DEFINE(HAVE_SYS_SELECT_H)
    fi
fi
AC_MSG_RESULT($gtk_ok)
if test $gtk_ok = no; then
    AC_DEFINE(NO_FD_SET)
fi

AC_OUTPUT(Makefile gtk+.xconfig docs/Makefile gdk/Makefile gtk/Makefile)
