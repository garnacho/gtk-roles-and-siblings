What is new in GTK+ 1.1.6:

* The signal system now features emission hooks whith special semantics,
  refer to the ChangeLog for this.
* Minor? speedups and memory reductions to the emission handling of the
  signal system.
* _interp() function variants are deprecated now. the corresponding *_full()
  variants are provided for a long time now.
* Dnd abort timeout increased to 10 minutes.
* GtkScrolledWindow inherits from GtkBin now.
* GTK_POLICY_NEVER is implemented for scrolled windows now.
* Lots of API clean ups.
* Incremental freezing abilities.
* Integrated widgets from the GNOME tree: GtkLayout, GtkPlug and GtkSocket.
* New window functions for transient relationship, default size, and 
  geometry hints
* Default rc files are now read in (<sysconfdir/etc/gtkrc and ~/.gtkrc)
  GTK_RC_FILES environment variable and functions are provided to configure
  this behavior
* Read doc/Changes-1.2.txt to properly adapt your code.
* Bug Fixes.

What is new in GTK+ 1.1.5:

* Theme integration
* Widget style modification is now handled through GtkRcStyles
* GtkPixmaps now grey out pixmaps when insensitive
* Notebook enhancements
* Shadow configurability for menubars and handleboxes
* DND enhancements
* gtkfilesel now supports automounters better
* Implementation of expose compression
* Queued redraws of partial areas
* Scrolledwindow (+Viewport) source incompatibilities, children that are added
  to a scrolled window don't get an automatic viewport anymore. a convenience
  function gtk_scrolled_window_add_with_viewport() is suplied for this task
* Deprecated functions will now issue a message, informing the programmer about
  the use of this function. These functions will get removed in future versions
* Non-functional functions got removed entirely
* gtk_widget_new() and gtk_object_new() will now auto-construct new objects.
  A new function gtk_object_default_construct() is provided now which should
  be called after every gtk_type_new() to perfom the auto-construction
* Improved argument support of several widgets
* Bug Fixes

What is new in GTK+ 1.1.3:

* GtkCList/GtkCTree now have the ability to:
    - hide/show individual columns
    - disable/enable column resizing
    - set min and max for column widths
    - set expander style of the ctree
    - set/get row and cell styles
    - set spacing between tree expander and cell contents in ctree
    - toggle auto_resize for columns
* Must enhanced DND support, removed old DND code
* Idle functions are now implemented via GHook, giving a slight speed
  improvement
* An environment variable GTK_MODULES which takes a colon seperated
  list of module names GTK+ will now automatically load at gtk_init() startup
* GtkFontSel now has support for an extra 'base' filter
* New function gdk_window_set_root_origin to get the real geometry taking
  into account window manager offsets
* New function gtk_text_set_line_wrap to toggle line wrapping
* New function gtk_widget_add_events which safely adds additional
  events to a widget's event mask
* New function gdk_event_get_time to get the timestamp from a generic
  event
* New widget GtkCalendar
* New widget GtkInvisible - InputOnly offscreen windows used for reliable
  pointer grabs and selection handling in DND code
* New functions gtk_object_remove_no_notify[_by_id] to remove a certain
  data portion without invokation of its destroy notifier 
* gtk_spin_button_construct is now deprecated, use gtk_spin_button_configure
  instead 
* gtk_clist_set_border is now deprecated, use gtk_clist_set_shadow_type 
  instead
* Removed functions gtk_object_set_data_destroy[_by_id] 
* Documentation additions/updates 
* HTML and plain text files are now included in the distribution
* Bug fixes, typeness corrections, and general fixups

What is new in GTK+ 1.1.2:

* Gtk+ is now featuring runtime loading of dynamic modules via the
  --gtk-modules= command line switch. such modules have to export a
  G_MODULE_EXPORT void gtk_module_init (gint *argc, gchar ***argv);
  function which will be invoked to initialize the module. since such
  modules may create new widget types, they are always resident.
* The tutorial has been updated again.
* Changes to menus including tearoff menus and accelerators.
* Better support for modal dialogs.
* Removed CAN_FOCUS by default from scrollbars and button children of toolbar.
* More improvements and fixes for GtkCList and GtkCTree (i.e. row sorting).
* GtkCTree rows can be unselectable now.
* The GtkCTree API has undergone major renames (see ChangeLog entry from Lars
  Hamann on Tue Aug 18 00:29:13 1998).
* A bunch of varargs functions changed to get va_lists working on systems that
  implement va_lists as arrays.
* Improvements to the gdkrgb code.
* Improvements to Gdk color handling so we greatly reduce server traffic and
  don't leak colors anymore.
* Improved internal widget tree iterators (the GtkContainer::foreach signal
  vanished because of this).
* Option menus can have the keyboard focus now.
* More fixups to the text widget.
* GtkFileSelection should behave much more nicely in combination with AFS now.
* Support for label underlining.
* Support for GLib 1.1.3 log domains.
* Documentation improvements.
* Configuration fixes on various platforms.
* Miscellaneous fixes to XInput support.
* Build with shared library dependencies on Linux
* Fix for a major bug in the type systems memory allocation code that could
  cause random crashes.
* Libtool update to version 1.2b.
* Lots of bugfixes and cleanups again ;)


What is new in GTK+ 1.1.1:

* Tutorial updates and additions.
* Key binding support for GtkListItems and GtkList.
* Extended selection mode and autoscrolling for GtkLists.
* A GtkCtree now operates on GtkCTreeNode* structures rather than GList*.
* GtkCTreeNodes can now be created from GNode trees.
* Bug fixes for GtkNotebook, GtkCList, GtkCombo and GdkWindow reparentation.


What is new in GTK+ 1.1.0:

* New widget GtkFontSelector.
* New featurefull progress bar.
* New container widget GtkPacker.
* New object GtkItemFactory, GtkMenuFactory is deprecated.
* New key binding system, configurable via rcfiles, similar to styles.
* New widget GtkCTree with drag selections and keyboard movement and
  and horizontal scrolling. Features also implemented for GtkCList.
* Significant speedups to widget creation and destruction through caching
  colormap and visual queries to the XServer.
* Speedups for type creation and especially gtk_type_is_a() checks.
* Speedups in signal lookup, creation and emissions and connection handling.
* Minor speedups with object data allocation and destruction.
* Additions to the signal handling API (e.g. *_emitv).
* Support for rc-file reparsing.
* Resizing logic is now implemented on container widget basis, rather than
  for toplevel GtkWindows only.
* Buttons support relief styles now.
* Some widgets are now allocated through memchunks to behave more memory wise.
* Newly included file gtkfeatures.h which defines compatibility macros to
  test for certain API features upon program compilation.
* Child arguments support for container widgets.
* Far better support for object arguments, revamp of the underlying
  mechanism for speed and reusability. Child/object arguments don't
  need to be preceeded by the "GtkType::" portion anymore.
* Removed GtkAcceleratorTable in favour of GtkAccelGroup, accelerator display
  is now performed by a new widget GtkAccelLabel.
* Overhaul of the resizing code. Resizing behaviour can now be specified
  on GtkContainer basis, so the underlying algorithm isn't only available
  for GtkWindows.
* GtkTables are now fully resizable.
* The GtkType system now supports an additional base class initialization
  function.
* GtkStyles and key bindings can now be looked up depending on the base
  types of a widget, through a new keyword `class' in rc files.
* GtkButton derives from GtkBin (finally).  
* More descriptive error messages on rc parsing.  
* Runtime information is available to query enum/flag definition values.
* Upgrade to libtool-1.2
* Legions of bug fixes, memory leaks, segfaults, of-by-something errors...
  including those that already went into the 1.0.x branch.
* A big bunch of features and cosmetic fixups that just got lost in
  the masses of changes.
